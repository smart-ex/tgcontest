<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2134.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2117" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2117" > </text>
<g id="frames">
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (2 samples, 0.01%)</title><rect x="442.6" y="1957" width="0.1" height="15.0" fill="rgb(216,201,54)" rx="2" ry="2" />
<text  x="445.57" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="1301" width="0.2" height="15.0" fill="rgb(251,71,53)" rx="2" ry="2" />
<text  x="461.49" y="1311.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2 samples, 0.01%)</title><rect x="188.2" y="1989" width="0.2" height="15.0" fill="rgb(208,184,9)" rx="2" ry="2" />
<text  x="191.24" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="209.7" y="1861" width="0.3" height="15.0" fill="rgb(250,202,3)" rx="2" ry="2" />
<text  x="212.69" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="197" width="0.5" height="15.0" fill="rgb(230,218,25)" rx="2" ry="2" />
<text  x="1185.34" y="207.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (7 samples, 0.05%)</title><rect x="772.9" y="2053" width="0.6" height="15.0" fill="rgb(249,213,32)" rx="2" ry="2" />
<text  x="775.92" y="2063.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2 samples, 0.01%)</title><rect x="636.8" y="1973" width="0.2" height="15.0" fill="rgb(250,61,20)" rx="2" ry="2" />
<text  x="639.81" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="501" width="6.8" height="15.0" fill="rgb(247,102,10)" rx="2" ry="2" />
<text  x="67.90" y="511.5" ></text>
</g>
<g >
<title>torch::autograd::impl::gradient_edge (2 samples, 0.01%)</title><rect x="72.6" y="1973" width="0.2" height="15.0" fill="rgb(242,170,32)" rx="2" ry="2" />
<text  x="75.65" y="1983.5" ></text>
</g>
<g >
<title>at::TensorIterator::binary_op (16 samples, 0.12%)</title><rect x="73.2" y="2005" width="1.4" height="15.0" fill="rgb(226,65,14)" rx="2" ry="2" />
<text  x="76.24" y="2015.5" ></text>
</g>
<g >
<title>at::TypeDefault::fill__Scalar (2 samples, 0.01%)</title><rect x="65.3" y="37" width="0.2" height="15.0" fill="rgb(243,0,10)" rx="2" ry="2" />
<text  x="68.33" y="47.5" ></text>
</g>
<g >
<title>[unknown] (79 samples, 0.57%)</title><rect x="64.9" y="117" width="6.7" height="15.0" fill="rgb(254,171,21)" rx="2" ry="2" />
<text  x="67.90" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="757" width="0.5" height="15.0" fill="rgb(247,6,28)" rx="2" ry="2" />
<text  x="1184.66" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="133" width="0.5" height="15.0" fill="rgb(242,109,30)" rx="2" ry="2" />
<text  x="1185.34" y="143.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1157" width="6.8" height="15.0" fill="rgb(242,102,31)" rx="2" ry="2" />
<text  x="67.90" y="1167.5" ></text>
</g>
<g >
<title>c10::KernelFunction::make_boxed_function&lt;&amp;(anonymous namespace)::variable_fallback_kernel&gt; (2 samples, 0.01%)</title><rect x="68.3" y="37" width="0.2" height="15.0" fill="rgb(232,21,16)" rx="2" ry="2" />
<text  x="71.31" y="47.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (70 samples, 0.50%)</title><rect x="992.5" y="2053" width="6.0" height="15.0" fill="rgb(210,108,14)" rx="2" ry="2" />
<text  x="995.52" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1182.3" y="1781" width="0.5" height="15.0" fill="rgb(226,43,48)" rx="2" ry="2" />
<text  x="1185.25" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="773" width="0.5" height="15.0" fill="rgb(252,225,35)" rx="2" ry="2" />
<text  x="1185.34" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3 samples, 0.02%)</title><rect x="1163.1" y="2037" width="0.3" height="15.0" fill="rgb(246,36,32)" rx="2" ry="2" />
<text  x="1166.10" y="2047.5" ></text>
</g>
<g >
<title>fasttext::Vector::zero (3 samples, 0.02%)</title><rect x="631.6" y="1941" width="0.3" height="15.0" fill="rgb(235,189,11)" rx="2" ry="2" />
<text  x="634.62" y="1951.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (15 samples, 0.11%)</title><rect x="618.6" y="1941" width="1.3" height="15.0" fill="rgb(237,86,19)" rx="2" ry="2" />
<text  x="621.60" y="1951.5" ></text>
</g>
<g >
<title>virtual thunk to std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_istringstream (2 samples, 0.01%)</title><rect x="747.1" y="2037" width="0.2" height="15.0" fill="rgb(249,125,6)" rx="2" ry="2" />
<text  x="750.13" y="2047.5" ></text>
</g>
<g >
<title>c10::typeMetaToScalarType (2 samples, 0.01%)</title><rect x="479.6" y="1877" width="0.2" height="15.0" fill="rgb(244,183,16)" rx="2" ry="2" />
<text  x="482.60" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="693" width="0.5" height="15.0" fill="rgb(219,15,0)" rx="2" ry="2" />
<text  x="1184.66" y="703.5" ></text>
</g>
<g >
<title>c10::KernelFunction::make_boxed_function&lt;&amp;(anonymous namespace)::variable_fallback_kernel&gt; (4 samples, 0.03%)</title><rect x="758.6" y="2053" width="0.4" height="15.0" fill="rgb(216,1,33)" rx="2" ry="2" />
<text  x="761.62" y="2063.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (3 samples, 0.02%)</title><rect x="642.3" y="1989" width="0.3" height="15.0" fill="rgb(252,87,1)" rx="2" ry="2" />
<text  x="645.35" y="1999.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::unsqueeze (2 samples, 0.01%)</title><rect x="470.8" y="1909" width="0.2" height="15.0" fill="rgb(254,7,37)" rx="2" ry="2" />
<text  x="473.83" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="458.9" y="1637" width="0.4" height="15.0" fill="rgb(205,132,49)" rx="2" ry="2" />
<text  x="461.92" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="661" width="0.5" height="15.0" fill="rgb(208,108,50)" rx="2" ry="2" />
<text  x="1185.34" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="549" width="0.5" height="15.0" fill="rgb(251,9,0)" rx="2" ry="2" />
<text  x="1185.34" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (11 samples, 0.08%)</title><rect x="736.0" y="2037" width="0.9" height="15.0" fill="rgb(247,36,43)" rx="2" ry="2" />
<text  x="738.98" y="2047.5" ></text>
</g>
<g >
<title>onmt::unicode::get_lower (19 samples, 0.14%)</title><rect x="100.8" y="2021" width="1.6" height="15.0" fill="rgb(226,172,30)" rx="2" ry="2" />
<text  x="103.82" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="725" width="6.8" height="15.0" fill="rgb(253,153,15)" rx="2" ry="2" />
<text  x="67.90" y="735.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="629" width="6.8" height="15.0" fill="rgb(232,76,6)" rx="2" ry="2" />
<text  x="67.90" y="639.5" ></text>
</g>
<g >
<title>cfree (120 samples, 0.87%)</title><rect x="761.8" y="2053" width="10.2" height="15.0" fill="rgb(207,66,16)" rx="2" ry="2" />
<text  x="764.77" y="2063.5" ></text>
</g>
<g >
<title>fasttext::Vector::addVector (12 samples, 0.09%)</title><rect x="619.9" y="1941" width="1.0" height="15.0" fill="rgb(254,92,10)" rx="2" ry="2" />
<text  x="622.88" y="1951.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (6 samples, 0.04%)</title><rect x="632.3" y="1941" width="0.5" height="15.0" fill="rgb(244,133,30)" rx="2" ry="2" />
<text  x="635.30" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="458.8" y="1685" width="0.5" height="15.0" fill="rgb(240,19,7)" rx="2" ry="2" />
<text  x="461.83" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1181.1" y="2037" width="0.3" height="15.0" fill="rgb(253,141,13)" rx="2" ry="2" />
<text  x="1184.15" y="2047.5" ></text>
</g>
<g >
<title>__kmp_invoke_microtask (518 samples, 3.74%)</title><rect x="129.2" y="2021" width="44.1" height="15.0" fill="rgb(241,202,7)" rx="2" ry="2" />
<text  x="132.17" y="2031.5" >__km..</text>
</g>
<g >
<title>at::TensorIterator::compute_shape (2 samples, 0.01%)</title><rect x="74.1" y="1989" width="0.2" height="15.0" fill="rgb(223,122,54)" rx="2" ry="2" />
<text  x="77.09" y="1999.5" ></text>
</g>
<g >
<title>at::native::mm_cpu (3 samples, 0.02%)</title><rect x="78.9" y="2005" width="0.2" height="15.0" fill="rgb(218,174,18)" rx="2" ry="2" />
<text  x="81.86" y="2015.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;TDbDocument*, __gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (9 samples, 0.06%)</title><rect x="443.8" y="1957" width="0.7" height="15.0" fill="rgb(236,95,44)" rx="2" ry="2" />
<text  x="446.76" y="1967.5" ></text>
</g>
<g >
<title>DetectCategory (26 samples, 0.19%)</title><rect x="454.3" y="1957" width="2.2" height="15.0" fill="rgb(228,8,43)" rx="2" ry="2" />
<text  x="457.32" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1181.7" y="69" width="0.5" height="15.0" fill="rgb(213,87,9)" rx="2" ry="2" />
<text  x="1184.74" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="789" width="0.5" height="15.0" fill="rgb(211,158,34)" rx="2" ry="2" />
<text  x="1185.34" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1445" width="0.5" height="15.0" fill="rgb(225,11,9)" rx="2" ry="2" />
<text  x="1185.34" y="1455.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::GetCountryShare (42 samples, 0.30%)</title><rect x="190.6" y="1941" width="3.6" height="15.0" fill="rgb(215,4,5)" rx="2" ry="2" />
<text  x="193.62" y="1951.5" ></text>
</g>
<g >
<title>at::CPUType::mm (4 samples, 0.03%)</title><rect x="78.9" y="2021" width="0.3" height="15.0" fill="rgb(213,208,40)" rx="2" ry="2" />
<text  x="81.86" y="2031.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (4 samples, 0.03%)</title><rect x="127.5" y="2021" width="0.4" height="15.0" fill="rgb(239,207,53)" rx="2" ry="2" />
<text  x="130.55" y="2031.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="202.0" y="1925" width="0.2" height="15.0" fill="rgb(245,143,20)" rx="2" ry="2" />
<text  x="205.03" y="1935.5" ></text>
</g>
<g >
<title>at::native::setStrided (2 samples, 0.01%)</title><rect x="640.0" y="1973" width="0.2" height="15.0" fill="rgb(206,83,37)" rx="2" ry="2" />
<text  x="643.05" y="1983.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (6 samples, 0.04%)</title><rect x="740.2" y="2005" width="0.5" height="15.0" fill="rgb(226,90,19)" rx="2" ry="2" />
<text  x="743.23" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16 samples, 0.12%)</title><rect x="457.9" y="1765" width="1.4" height="15.0" fill="rgb(211,6,3)" rx="2" ry="2" />
<text  x="460.89" y="1775.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (4 samples, 0.03%)</title><rect x="447.3" y="1909" width="0.4" height="15.0" fill="rgb(210,185,10)" rx="2" ry="2" />
<text  x="450.34" y="1919.5" ></text>
</g>
<g >
<title>THStorage_resize@plt (2 samples, 0.01%)</title><rect x="68.9" y="37" width="0.2" height="15.0" fill="rgb(229,192,13)" rx="2" ry="2" />
<text  x="71.90" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1182.2" y="2021" width="0.6" height="15.0" fill="rgb(231,70,43)" rx="2" ry="2" />
<text  x="1185.17" y="2031.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (11 samples, 0.08%)</title><rect x="205.5" y="1925" width="1.0" height="15.0" fill="rgb(245,77,11)" rx="2" ry="2" />
<text  x="208.52" y="1935.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (15 samples, 0.11%)</title><rect x="190.9" y="1925" width="1.3" height="15.0" fill="rgb(206,4,29)" rx="2" ry="2" />
<text  x="193.88" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="1237" width="0.2" height="15.0" fill="rgb(253,60,12)" rx="2" ry="2" />
<text  x="461.49" y="1247.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxed&lt;at::Tensor, at::Tensor const&amp;, long, long, long, long&gt; (28 samples, 0.20%)</title><rect x="471.2" y="1925" width="2.4" height="15.0" fill="rgb(218,147,38)" rx="2" ry="2" />
<text  x="474.17" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="485" width="0.5" height="15.0" fill="rgb(217,131,8)" rx="2" ry="2" />
<text  x="1185.34" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="458.9" y="1477" width="0.4" height="15.0" fill="rgb(222,8,11)" rx="2" ry="2" />
<text  x="461.92" y="1487.5" ></text>
</g>
<g >
<title>malloc (4 samples, 0.03%)</title><rect x="696.2" y="2021" width="0.4" height="15.0" fill="rgb(224,56,7)" rx="2" ry="2" />
<text  x="699.23" y="2031.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="190.7" y="1925" width="0.2" height="15.0" fill="rgb(238,75,52)" rx="2" ry="2" />
<text  x="193.71" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="869" width="0.2" height="15.0" fill="rgb(210,18,7)" rx="2" ry="2" />
<text  x="461.49" y="879.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1941" width="6.9" height="15.0" fill="rgb(215,104,13)" rx="2" ry="2" />
<text  x="67.90" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1182.3" y="1893" width="0.5" height="15.0" fill="rgb(246,168,1)" rx="2" ry="2" />
<text  x="1185.25" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1445" width="0.5" height="15.0" fill="rgb(244,98,33)" rx="2" ry="2" />
<text  x="1184.66" y="1455.5" ></text>
</g>
<g >
<title>__tls_get_addr (2 samples, 0.01%)</title><rect x="470.0" y="1925" width="0.2" height="15.0" fill="rgb(238,170,49)" rx="2" ry="2" />
<text  x="472.98" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="458.9" y="1541" width="0.4" height="15.0" fill="rgb(240,210,36)" rx="2" ry="2" />
<text  x="461.92" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1181.1" y="1989" width="0.2" height="15.0" fill="rgb(208,66,40)" rx="2" ry="2" />
<text  x="1184.15" y="1999.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_construct_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.01%)</title><rect x="205.3" y="1925" width="0.2" height="15.0" fill="rgb(212,134,22)" rx="2" ry="2" />
<text  x="208.35" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.1" y="1365" width="0.2" height="15.0" fill="rgb(205,58,19)" rx="2" ry="2" />
<text  x="462.09" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1109" width="6.8" height="15.0" fill="rgb(214,172,49)" rx="2" ry="2" />
<text  x="67.90" y="1119.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (35 samples, 0.25%)</title><rect x="439.4" y="1925" width="3.0" height="15.0" fill="rgb(210,3,47)" rx="2" ry="2" />
<text  x="442.42" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="421" width="6.8" height="15.0" fill="rgb(238,123,0)" rx="2" ry="2" />
<text  x="67.90" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (14 samples, 0.10%)</title><rect x="50.6" y="2053" width="1.2" height="15.0" fill="rgb(227,149,50)" rx="2" ry="2" />
<text  x="53.60" y="2063.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (9 samples, 0.06%)</title><rect x="82.6" y="2021" width="0.8" height="15.0" fill="rgb(221,3,24)" rx="2" ry="2" />
<text  x="85.61" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="458.1" y="1509" width="0.6" height="15.0" fill="rgb(206,90,6)" rx="2" ry="2" />
<text  x="461.15" y="1519.5" ></text>
</g>
<g >
<title>c10::IValue::type (9 samples, 0.06%)</title><rect x="1148.6" y="1957" width="0.8" height="15.0" fill="rgb(254,147,33)" rx="2" ry="2" />
<text  x="1151.63" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1181.4" y="2005" width="0.8" height="15.0" fill="rgb(233,28,17)" rx="2" ry="2" />
<text  x="1184.40" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1445" width="6.9" height="15.0" fill="rgb(248,175,19)" rx="2" ry="2" />
<text  x="67.90" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1181.4" y="1893" width="0.8" height="15.0" fill="rgb(239,98,0)" rx="2" ry="2" />
<text  x="1184.40" y="1903.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0, 1&gt;::run (518 samples, 3.74%)</title><rect x="129.2" y="1989" width="44.1" height="15.0" fill="rgb(228,39,10)" rx="2" ry="2" />
<text  x="132.17" y="1999.5" >Eige..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::uflow (3 samples, 0.02%)</title><rect x="1184.6" y="2053" width="0.2" height="15.0" fill="rgb(248,146,13)" rx="2" ry="2" />
<text  x="1187.55" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.04%)</title><rect x="645.5" y="2005" width="0.5" height="15.0" fill="rgb(229,69,24)" rx="2" ry="2" />
<text  x="648.50" y="2015.5" ></text>
</g>
<g >
<title>cfree (14 samples, 0.10%)</title><rect x="647.5" y="2037" width="1.2" height="15.0" fill="rgb(237,52,26)" rx="2" ry="2" />
<text  x="650.54" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="981" width="0.5" height="15.0" fill="rgb(242,154,51)" rx="2" ry="2" />
<text  x="1184.66" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="917" width="0.2" height="15.0" fill="rgb(229,24,38)" rx="2" ry="2" />
<text  x="461.49" y="927.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare@plt (13 samples, 0.09%)</title><rect x="1177.3" y="2053" width="1.1" height="15.0" fill="rgb(251,122,26)" rx="2" ry="2" />
<text  x="1180.32" y="2063.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (429 samples, 3.09%)</title><rect x="698.4" y="2037" width="36.5" height="15.0" fill="rgb(207,203,7)" rx="2" ry="2" />
<text  x="701.35" y="2047.5" >onm..</text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="448.4" y="1893" width="0.2" height="15.0" fill="rgb(229,210,41)" rx="2" ry="2" />
<text  x="451.45" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1765" width="6.9" height="15.0" fill="rgb(248,209,11)" rx="2" ry="2" />
<text  x="67.90" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1029" width="0.5" height="15.0" fill="rgb(216,156,18)" rx="2" ry="2" />
<text  x="1185.34" y="1039.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::ScoreUrl (49 samples, 0.35%)</title><rect x="194.2" y="1941" width="4.2" height="15.0" fill="rgb(237,214,7)" rx="2" ry="2" />
<text  x="197.20" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="209.8" y="1477" width="0.1" height="15.0" fill="rgb(227,229,26)" rx="2" ry="2" />
<text  x="212.77" y="1487.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (6 samples, 0.04%)</title><rect x="201.4" y="1925" width="0.5" height="15.0" fill="rgb(215,134,18)" rx="2" ry="2" />
<text  x="204.43" y="1935.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (5 samples, 0.04%)</title><rect x="649.7" y="2037" width="0.4" height="15.0" fill="rgb(236,81,22)" rx="2" ry="2" />
<text  x="652.67" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="437" width="0.5" height="15.0" fill="rgb(216,62,17)" rx="2" ry="2" />
<text  x="1184.66" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_erase (4 samples, 0.03%)</title><rect x="207.2" y="1957" width="0.4" height="15.0" fill="rgb(231,69,9)" rx="2" ry="2" />
<text  x="210.22" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1182.3" y="1941" width="0.5" height="15.0" fill="rgb(207,186,34)" rx="2" ry="2" />
<text  x="1185.25" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (48 samples, 0.35%)</title><rect x="65.0" y="69" width="4.1" height="15.0" fill="rgb(244,211,41)" rx="2" ry="2" />
<text  x="67.99" y="79.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1637" width="6.9" height="15.0" fill="rgb(232,119,39)" rx="2" ry="2" />
<text  x="67.90" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="709" width="0.2" height="15.0" fill="rgb(252,226,49)" rx="2" ry="2" />
<text  x="461.49" y="719.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.04%)</title><rect x="645.1" y="2021" width="0.4" height="15.0" fill="rgb(238,30,21)" rx="2" ry="2" />
<text  x="648.07" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="421" width="0.5" height="15.0" fill="rgb(223,183,26)" rx="2" ry="2" />
<text  x="1184.66" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_insert_unique_pos (4 samples, 0.03%)</title><rect x="202.2" y="1925" width="0.3" height="15.0" fill="rgb(244,183,18)" rx="2" ry="2" />
<text  x="205.20" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="997" width="6.8" height="15.0" fill="rgb(250,168,36)" rx="2" ry="2" />
<text  x="67.90" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="1285" width="0.2" height="15.0" fill="rgb(250,177,23)" rx="2" ry="2" />
<text  x="461.49" y="1295.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcImportance (203 samples, 1.46%)</title><rect x="189.8" y="1957" width="17.2" height="15.0" fill="rgb(208,221,23)" rx="2" ry="2" />
<text  x="192.77" y="1967.5" ></text>
</g>
<g >
<title>c10::ivalue::Object::type (4 samples, 0.03%)</title><rect x="645.6" y="1989" width="0.3" height="15.0" fill="rgb(225,44,34)" rx="2" ry="2" />
<text  x="648.58" y="1999.5" ></text>
</g>
<g >
<title>cfree (2 samples, 0.01%)</title><rect x="443.2" y="1973" width="0.1" height="15.0" fill="rgb(205,25,27)" rx="2" ry="2" />
<text  x="446.17" y="1983.5" ></text>
</g>
<g >
<title>torch::jit::Object::find_method (4 samples, 0.03%)</title><rect x="1147.2" y="2021" width="0.3" height="15.0" fill="rgb(219,215,41)" rx="2" ry="2" />
<text  x="1150.19" y="2031.5" ></text>
</g>
<g >
<title>GetHost (25 samples, 0.18%)</title><rect x="457.2" y="1957" width="2.1" height="15.0" fill="rgb(219,53,30)" rx="2" ry="2" />
<text  x="460.21" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1797" width="6.9" height="15.0" fill="rgb(213,223,11)" rx="2" ry="2" />
<text  x="67.90" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="458.9" y="1509" width="0.4" height="15.0" fill="rgb(236,207,10)" rx="2" ry="2" />
<text  x="461.92" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="501" width="0.5" height="15.0" fill="rgb(246,5,49)" rx="2" ry="2" />
<text  x="1184.66" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="421" width="0.5" height="15.0" fill="rgb(250,14,51)" rx="2" ry="2" />
<text  x="1185.34" y="431.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="636.6" y="1957" width="0.1" height="15.0" fill="rgb(233,197,31)" rx="2" ry="2" />
<text  x="639.56" y="1967.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::_th_addmm_out (4 samples, 0.03%)</title><rect x="70.2" y="85" width="0.3" height="15.0" fill="rgb(243,158,14)" rx="2" ry="2" />
<text  x="73.18" y="95.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (3 samples, 0.02%)</title><rect x="175.1" y="1941" width="0.3" height="15.0" fill="rgb(254,202,53)" rx="2" ry="2" />
<text  x="178.13" y="1951.5" ></text>
</g>
<g >
<title>at::TypeDefault::slice_Tensor (7 samples, 0.05%)</title><rect x="471.8" y="1893" width="0.6" height="15.0" fill="rgb(233,56,38)" rx="2" ry="2" />
<text  x="474.77" y="1903.5" ></text>
</g>
<g >
<title>all (13,863 samples, 100%)</title><rect x="10.0" y="2085" width="1180.0" height="15.0" fill="rgb(251,38,4)" rx="2" ry="2" />
<text  x="13.00" y="2095.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="1173" width="0.2" height="15.0" fill="rgb(253,60,19)" rx="2" ry="2" />
<text  x="461.49" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="357" width="6.8" height="15.0" fill="rgb(242,193,34)" rx="2" ry="2" />
<text  x="67.90" y="367.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1541" width="6.9" height="15.0" fill="rgb(209,65,2)" rx="2" ry="2" />
<text  x="67.90" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1653" width="6.9" height="15.0" fill="rgb(218,114,38)" rx="2" ry="2" />
<text  x="67.90" y="1663.5" ></text>
</g>
<g >
<title>at::TypeDefault::fill__Scalar (6 samples, 0.04%)</title><rect x="69.7" y="69" width="0.5" height="15.0" fill="rgb(214,50,47)" rx="2" ry="2" />
<text  x="72.67" y="79.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (4 samples, 0.03%)</title><rect x="174.0" y="1973" width="0.4" height="15.0" fill="rgb(230,191,50)" rx="2" ry="2" />
<text  x="177.02" y="1983.5" ></text>
</g>
<g >
<title>__kmp_invoke_task_func (518 samples, 3.74%)</title><rect x="129.2" y="2037" width="44.1" height="15.0" fill="rgb(250,77,22)" rx="2" ry="2" />
<text  x="132.17" y="2047.5" >__km..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1141" width="0.5" height="15.0" fill="rgb(251,192,33)" rx="2" ry="2" />
<text  x="1184.66" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="458.3" y="1413" width="0.4" height="15.0" fill="rgb(234,163,43)" rx="2" ry="2" />
<text  x="461.32" y="1423.5" ></text>
</g>
<g >
<title>at::native::mm_cpu_out (2 samples, 0.01%)</title><rect x="69.5" y="85" width="0.2" height="15.0" fill="rgb(247,186,44)" rx="2" ry="2" />
<text  x="72.50" y="95.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (3 samples, 0.02%)</title><rect x="447.7" y="1909" width="0.2" height="15.0" fill="rgb(246,189,42)" rx="2" ry="2" />
<text  x="450.68" y="1919.5" ></text>
</g>
<g >
<title>cfree (7 samples, 0.05%)</title><rect x="80.1" y="2021" width="0.6" height="15.0" fill="rgb(253,205,26)" rx="2" ry="2" />
<text  x="83.14" y="2031.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="201.3" y="1941" width="0.1" height="15.0" fill="rgb(228,19,13)" rx="2" ry="2" />
<text  x="204.26" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="917" width="0.5" height="15.0" fill="rgb(247,105,18)" rx="2" ry="2" />
<text  x="1184.66" y="927.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (3 samples, 0.02%)</title><rect x="174.4" y="1989" width="0.3" height="15.0" fill="rgb(227,39,12)" rx="2" ry="2" />
<text  x="177.45" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (6 samples, 0.04%)</title><rect x="686.2" y="2021" width="0.5" height="15.0" fill="rgb(234,29,31)" rx="2" ry="2" />
<text  x="689.18" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1413" width="0.5" height="15.0" fill="rgb(205,39,21)" rx="2" ry="2" />
<text  x="1185.34" y="1423.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;tg::ELanguage, std::pair&lt;tg::ELanguage const, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;tg::ELanguage const, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt; &gt;, std::less&lt;tg::ELanguage&gt;, std::allocator&lt;std::pair&lt;tg::ELanguage const, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="443.2" y="1989" width="0.1" height="15.0" fill="rgb(241,92,16)" rx="2" ry="2" />
<text  x="446.17" y="1999.5" ></text>
</g>
<g >
<title>torch::jit::(anonymous namespace)::{lambda (3 samples, 0.02%)</title><rect x="1150.5" y="1957" width="0.3" height="15.0" fill="rgb(252,107,28)" rx="2" ry="2" />
<text  x="1153.50" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="458.9" y="1589" width="0.4" height="15.0" fill="rgb(228,62,13)" rx="2" ry="2" />
<text  x="461.92" y="1599.5" ></text>
</g>
<g >
<title>c10::KernelFunction::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (11 samples, 0.08%)</title><rect x="475.2" y="1829" width="0.9" height="15.0" fill="rgb(244,50,3)" rx="2" ry="2" />
<text  x="478.17" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1621" width="0.5" height="15.0" fill="rgb(252,155,49)" rx="2" ry="2" />
<text  x="1185.34" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="853" width="0.2" height="15.0" fill="rgb(251,7,11)" rx="2" ry="2" />
<text  x="461.49" y="863.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1733" width="6.9" height="15.0" fill="rgb(250,38,22)" rx="2" ry="2" />
<text  x="67.90" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="997" width="0.5" height="15.0" fill="rgb(223,144,36)" rx="2" ry="2" />
<text  x="1184.66" y="1007.5" ></text>
</g>
<g >
<title>__pthread_once_slow (2,158 samples, 15.57%)</title><rect x="453.3" y="2037" width="183.7" height="15.0" fill="rgb(245,175,36)" rx="2" ry="2" />
<text  x="456.30" y="2047.5" >__pthread_once_slow</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="458.8" y="1701" width="0.5" height="15.0" fill="rgb(249,45,42)" rx="2" ry="2" />
<text  x="461.83" y="1711.5" ></text>
</g>
<g >
<title>at::CPUType::add_Tensor (5 samples, 0.04%)</title><rect x="1152.1" y="1909" width="0.4" height="15.0" fill="rgb(217,96,21)" rx="2" ry="2" />
<text  x="1155.12" y="1919.5" ></text>
</g>
<g >
<title>c10::OperatorHandle::callUnboxed&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;&gt; (2 samples, 0.01%)</title><rect x="478.4" y="1893" width="0.2" height="15.0" fill="rgb(205,14,39)" rx="2" ry="2" />
<text  x="481.41" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="101" width="0.5" height="15.0" fill="rgb(216,164,27)" rx="2" ry="2" />
<text  x="1185.34" y="111.5" ></text>
</g>
<g >
<title>c10::FunctionSchema::checkAndNormalizeInputs (16 samples, 0.12%)</title><rect x="1148.5" y="1989" width="1.3" height="15.0" fill="rgb(209,188,14)" rx="2" ry="2" />
<text  x="1151.46" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="965" width="6.8" height="15.0" fill="rgb(220,100,15)" rx="2" ry="2" />
<text  x="67.90" y="975.5" ></text>
</g>
<g >
<title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;::reset_ (4 samples, 0.03%)</title><rect x="646.5" y="2005" width="0.4" height="15.0" fill="rgb(209,195,9)" rx="2" ry="2" />
<text  x="649.52" y="2015.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (256 samples, 1.85%)</title><rect x="102.4" y="2021" width="21.8" height="15.0" fill="rgb(228,66,34)" rx="2" ry="2" />
<text  x="105.44" y="2031.5" >o..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1181.6" y="1637" width="0.6" height="15.0" fill="rgb(231,73,47)" rx="2" ry="2" />
<text  x="1184.57" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1397" width="0.5" height="15.0" fill="rgb(238,129,12)" rx="2" ry="2" />
<text  x="1184.66" y="1407.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (628 samples, 4.53%)</title><rect x="1079.4" y="2053" width="53.5" height="15.0" fill="rgb(225,84,17)" rx="2" ry="2" />
<text  x="1082.43" y="2063.5" >onmt:..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1589" width="0.5" height="15.0" fill="rgb(233,122,42)" rx="2" ry="2" />
<text  x="1185.34" y="1599.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxedWithDispatchKey&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (12 samples, 0.09%)</title><rect x="475.2" y="1845" width="1.0" height="15.0" fill="rgb(226,8,16)" rx="2" ry="2" />
<text  x="478.17" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (19 samples, 0.14%)</title><rect x="457.6" y="1877" width="1.7" height="15.0" fill="rgb(211,144,30)" rx="2" ry="2" />
<text  x="460.64" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1317" width="0.5" height="15.0" fill="rgb(218,10,43)" rx="2" ry="2" />
<text  x="1184.66" y="1327.5" ></text>
</g>
<g >
<title>TThreadPool::enqueue&lt;std::optional&lt;TDbDocument&gt;  (5 samples, 0.04%)</title><rect x="174.0" y="1989" width="0.4" height="15.0" fill="rgb(248,53,5)" rx="2" ry="2" />
<text  x="177.02" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="325" width="0.5" height="15.0" fill="rgb(236,7,24)" rx="2" ry="2" />
<text  x="1184.66" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="533" width="0.2" height="15.0" fill="rgb(225,145,22)" rx="2" ry="2" />
<text  x="461.49" y="543.5" ></text>
</g>
<g >
<title>operator delete@plt (2 samples, 0.01%)</title><rect x="735.4" y="2037" width="0.2" height="15.0" fill="rgb(206,58,7)" rx="2" ry="2" />
<text  x="738.38" y="2047.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.01%)</title><rect x="747.4" y="2037" width="0.2" height="15.0" fill="rgb(224,211,40)" rx="2" ry="2" />
<text  x="750.38" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.1" y="1205" width="0.2" height="15.0" fill="rgb(207,124,30)" rx="2" ry="2" />
<text  x="462.09" y="1215.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;rocksdb::Directory&gt;, std::allocator&lt;std::shared_ptr&lt;rocksdb::Directory&gt; &gt; &gt;::_M_realloc_insert&lt;std::shared_ptr&lt;rocksdb::Directory&gt;&amp;&gt; (3 samples, 0.02%)</title><rect x="1187.3" y="2053" width="0.2" height="15.0" fill="rgb(224,211,5)" rx="2" ry="2" />
<text  x="1190.28" y="2063.5" ></text>
</g>
<g >
<title>at::Tensor::grad_fn (2 samples, 0.01%)</title><rect x="72.4" y="1973" width="0.2" height="15.0" fill="rgb(205,158,17)" rx="2" ry="2" />
<text  x="75.39" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="209.8" y="1397" width="0.1" height="15.0" fill="rgb(222,13,17)" rx="2" ry="2" />
<text  x="212.77" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="293" width="0.5" height="15.0" fill="rgb(239,73,25)" rx="2" ry="2" />
<text  x="1185.34" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1141" width="0.5" height="15.0" fill="rgb(237,145,21)" rx="2" ry="2" />
<text  x="1185.34" y="1151.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.03%)</title><rect x="696.7" y="2021" width="0.3" height="15.0" fill="rgb(205,76,1)" rx="2" ry="2" />
<text  x="699.65" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="213" width="6.8" height="15.0" fill="rgb(223,130,27)" rx="2" ry="2" />
<text  x="67.90" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="709" width="0.5" height="15.0" fill="rgb(219,136,43)" rx="2" ry="2" />
<text  x="1184.66" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1181.4" y="1989" width="0.8" height="15.0" fill="rgb(224,13,14)" rx="2" ry="2" />
<text  x="1184.40" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1077" width="0.5" height="15.0" fill="rgb(241,184,14)" rx="2" ry="2" />
<text  x="1184.66" y="1087.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::push_back (7 samples, 0.05%)</title><rect x="451.9" y="2005" width="0.6" height="15.0" fill="rgb(242,229,39)" rx="2" ry="2" />
<text  x="454.94" y="2015.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (50 samples, 0.36%)</title><rect x="1070.5" y="2053" width="4.2" height="15.0" fill="rgb(233,68,8)" rx="2" ry="2" />
<text  x="1073.49" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="458.3" y="1445" width="0.4" height="15.0" fill="rgb(233,183,5)" rx="2" ry="2" />
<text  x="461.32" y="1455.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (401 samples, 2.89%)</title><rect x="1027.8" y="2053" width="34.2" height="15.0" fill="rgb(251,168,6)" rx="2" ry="2" />
<text  x="1030.85" y="2063.5" >on..</text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::parse (158 samples, 1.14%)</title><rect x="174.7" y="1973" width="13.5" height="15.0" fill="rgb(241,181,9)" rx="2" ry="2" />
<text  x="177.70" y="1983.5" ></text>
</g>
<g >
<title>at::native::DispatchStub&lt;void  (6 samples, 0.04%)</title><rect x="71.1" y="53" width="0.5" height="15.0" fill="rgb(216,186,15)" rx="2" ry="2" />
<text  x="74.12" y="63.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="451.0" y="1973" width="0.2" height="15.0" fill="rgb(237,137,0)" rx="2" ry="2" />
<text  x="454.00" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1253" width="6.8" height="15.0" fill="rgb(211,56,53)" rx="2" ry="2" />
<text  x="67.90" y="1263.5" ></text>
</g>
<g >
<title>c10::checked_convert&lt;float, long&gt; (3 samples, 0.02%)</title><rect x="71.4" y="37" width="0.2" height="15.0" fill="rgb(222,135,45)" rx="2" ry="2" />
<text  x="74.37" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1253" width="0.5" height="15.0" fill="rgb(246,199,0)" rx="2" ry="2" />
<text  x="1184.66" y="1263.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1365" width="6.8" height="15.0" fill="rgb(233,129,22)" rx="2" ry="2" />
<text  x="67.90" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1813" width="6.9" height="15.0" fill="rgb(242,127,1)" rx="2" ry="2" />
<text  x="67.90" y="1823.5" ></text>
</g>
<g >
<title>at::(anonymous namespace)::zeros (8 samples, 0.06%)</title><rect x="759.8" y="2021" width="0.7" height="15.0" fill="rgb(229,100,10)" rx="2" ry="2" />
<text  x="762.81" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="458.1" y="1589" width="0.6" height="15.0" fill="rgb(238,22,12)" rx="2" ry="2" />
<text  x="461.15" y="1599.5" ></text>
</g>
<g >
<title>onmt::unicode::is_number (24 samples, 0.17%)</title><rect x="1132.9" y="2053" width="2.0" height="15.0" fill="rgb(214,115,18)" rx="2" ry="2" />
<text  x="1135.89" y="2063.5" ></text>
</g>
<g >
<title>at::from_blob (26 samples, 0.19%)</title><rect x="474.9" y="1909" width="2.2" height="15.0" fill="rgb(217,188,6)" rx="2" ry="2" />
<text  x="477.92" y="1919.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_insert_unique&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (13 samples, 0.09%)</title><rect x="201.4" y="1941" width="1.1" height="15.0" fill="rgb(206,153,10)" rx="2" ry="2" />
<text  x="204.43" y="1951.5" ></text>
</g>
<g >
<title>at::TensorIterator::nullary_op (4 samples, 0.03%)</title><rect x="69.7" y="53" width="0.3" height="15.0" fill="rgb(238,71,1)" rx="2" ry="2" />
<text  x="72.67" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="805" width="0.5" height="15.0" fill="rgb(217,198,52)" rx="2" ry="2" />
<text  x="1185.34" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (14 samples, 0.10%)</title><rect x="67.1" y="37" width="1.2" height="15.0" fill="rgb(216,78,30)" rx="2" ry="2" />
<text  x="70.11" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="613" width="0.5" height="15.0" fill="rgb(212,224,5)" rx="2" ry="2" />
<text  x="1185.34" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;at::Tensor, std::allocator&lt;at::Tensor&gt; &gt;::emplace_back&lt;at::Tensor const&amp;&gt; (2 samples, 0.01%)</title><rect x="743.3" y="2037" width="0.2" height="15.0" fill="rgb(225,67,6)" rx="2" ry="2" />
<text  x="746.30" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1509" width="0.5" height="15.0" fill="rgb(217,191,50)" rx="2" ry="2" />
<text  x="1185.34" y="1519.5" ></text>
</g>
<g >
<title>__tls_get_addr (2 samples, 0.01%)</title><rect x="637.0" y="2037" width="0.2" height="15.0" fill="rgb(229,87,42)" rx="2" ry="2" />
<text  x="639.98" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.04%)</title><rect x="451.2" y="1989" width="0.4" height="15.0" fill="rgb(229,129,47)" rx="2" ry="2" />
<text  x="454.17" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="565" width="0.5" height="15.0" fill="rgb(217,3,54)" rx="2" ry="2" />
<text  x="1184.66" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1013" width="0.5" height="15.0" fill="rgb(208,18,18)" rx="2" ry="2" />
<text  x="1185.34" y="1023.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry@plt (2 samples, 0.01%)</title><rect x="1186.2" y="2053" width="0.1" height="15.0" fill="rgb(210,35,54)" rx="2" ry="2" />
<text  x="1189.17" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1077" width="6.8" height="15.0" fill="rgb(240,100,32)" rx="2" ry="2" />
<text  x="67.90" y="1087.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="485" width="6.8" height="15.0" fill="rgb(231,120,13)" rx="2" ry="2" />
<text  x="67.90" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="805" width="0.5" height="15.0" fill="rgb(209,89,33)" rx="2" ry="2" />
<text  x="1184.66" y="815.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="757" width="6.8" height="15.0" fill="rgb(208,146,17)" rx="2" ry="2" />
<text  x="67.90" y="767.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1381" width="6.9" height="15.0" fill="rgb(249,199,38)" rx="2" ry="2" />
<text  x="67.90" y="1391.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcImportance (231 samples, 1.67%)</title><rect x="189.6" y="1989" width="19.7" height="15.0" fill="rgb(251,217,16)" rx="2" ry="2" />
<text  x="192.60" y="1999.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (11 samples, 0.08%)</title><rect x="686.7" y="2037" width="0.9" height="15.0" fill="rgb(225,191,16)" rx="2" ry="2" />
<text  x="689.69" y="2047.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.02%)</title><rect x="207.9" y="1941" width="0.3" height="15.0" fill="rgb(225,10,25)" rx="2" ry="2" />
<text  x="210.90" y="1951.5" ></text>
</g>
<g >
<title>onmt::unicode::cp_to_utf8[abi:cxx11] (2 samples, 0.01%)</title><rect x="96.4" y="2021" width="0.2" height="15.0" fill="rgb(234,74,42)" rx="2" ry="2" />
<text  x="99.40" y="2031.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::s__th_addmm_out (2 samples, 0.01%)</title><rect x="69.5" y="53" width="0.2" height="15.0" fill="rgb(240,121,18)" rx="2" ry="2" />
<text  x="72.50" y="63.5" ></text>
</g>
<g >
<title>torch::autograd::Node::~Node (2 samples, 0.01%)</title><rect x="744.9" y="2037" width="0.2" height="15.0" fill="rgb(208,39,7)" rx="2" ry="2" />
<text  x="747.91" y="2047.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::construct&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (3 samples, 0.02%)</title><rect x="452.0" y="1989" width="0.3" height="15.0" fill="rgb(222,200,31)" rx="2" ry="2" />
<text  x="455.02" y="1999.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (2 samples, 0.01%)</title><rect x="452.9" y="1925" width="0.1" height="15.0" fill="rgb(225,90,53)" rx="2" ry="2" />
<text  x="455.87" y="1935.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (3 samples, 0.02%)</title><rect x="447.4" y="1893" width="0.3" height="15.0" fill="rgb(246,155,18)" rx="2" ry="2" />
<text  x="450.42" y="1903.5" ></text>
</g>
<g >
<title>mkl_blas_xsgemv (37 samples, 0.27%)</title><rect x="678.4" y="2037" width="3.1" height="15.0" fill="rgb(243,4,32)" rx="2" ry="2" />
<text  x="681.35" y="2047.5" ></text>
</g>
<g >
<title>caffe2::TypeMeta::_typeMetaDataInstance&lt;int&gt; (2 samples, 0.01%)</title><rect x="760.1" y="1989" width="0.1" height="15.0" fill="rgb(207,201,0)" rx="2" ry="2" />
<text  x="763.07" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1301" width="0.5" height="15.0" fill="rgb(228,63,52)" rx="2" ry="2" />
<text  x="1184.66" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1509" width="0.5" height="15.0" fill="rgb(253,63,1)" rx="2" ry="2" />
<text  x="1184.66" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="1077" width="0.2" height="15.0" fill="rgb(225,49,48)" rx="2" ry="2" />
<text  x="461.49" y="1087.5" ></text>
</g>
<g >
<title>syscall (2 samples, 0.01%)</title><rect x="188.7" y="1973" width="0.2" height="15.0" fill="rgb(244,117,2)" rx="2" ry="2" />
<text  x="191.75" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="981" width="0.5" height="15.0" fill="rgb(251,97,15)" rx="2" ry="2" />
<text  x="1185.34" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="933" width="0.5" height="15.0" fill="rgb(215,221,47)" rx="2" ry="2" />
<text  x="1185.34" y="943.5" ></text>
</g>
<g >
<title>TFastTextEmbedder::CalcEmbedding (138 samples, 1.00%)</title><rect x="467.1" y="1941" width="11.7" height="15.0" fill="rgb(221,224,10)" rx="2" ry="2" />
<text  x="470.09" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="661" width="0.2" height="15.0" fill="rgb(205,205,7)" rx="2" ry="2" />
<text  x="461.49" y="671.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (24 samples, 0.17%)</title><rect x="471.2" y="1909" width="2.0" height="15.0" fill="rgb(251,112,52)" rx="2" ry="2" />
<text  x="474.17" y="1919.5" ></text>
</g>
<g >
<title>c10::KernelFunction::getFunctor_ (2 samples, 0.01%)</title><rect x="761.4" y="2021" width="0.2" height="15.0" fill="rgb(221,221,42)" rx="2" ry="2" />
<text  x="764.43" y="2031.5" ></text>
</g>
<g >
<title>mkl_blas_sgemm (2 samples, 0.01%)</title><rect x="678.2" y="2037" width="0.2" height="15.0" fill="rgb(248,152,44)" rx="2" ry="2" />
<text  x="681.18" y="2047.5" ></text>
</g>
<g >
<title>torch::autograd::impl::gradient_edge (3 samples, 0.02%)</title><rect x="638.0" y="2021" width="0.3" height="15.0" fill="rgb(212,37,19)" rx="2" ry="2" />
<text  x="641.01" y="2031.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (2 samples, 0.01%)</title><rect x="72.2" y="1957" width="0.2" height="15.0" fill="rgb(242,138,53)" rx="2" ry="2" />
<text  x="75.22" y="1967.5" ></text>
</g>
<g >
<title>TDbDocument::TDbDocument (3 samples, 0.02%)</title><rect x="445.4" y="2005" width="0.2" height="15.0" fill="rgb(218,159,0)" rx="2" ry="2" />
<text  x="448.38" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1221" width="0.5" height="15.0" fill="rgb(251,19,10)" rx="2" ry="2" />
<text  x="1184.66" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.07%)</title><rect x="457.9" y="1749" width="0.8" height="15.0" fill="rgb(226,174,18)" rx="2" ry="2" />
<text  x="460.89" y="1759.5" ></text>
</g>
<g >
<title>TSlinkClustering::CalcDistances (212 samples, 1.53%)</title><rect x="424.4" y="1957" width="18.0" height="15.0" fill="rgb(250,170,47)" rx="2" ry="2" />
<text  x="427.36" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1861" width="6.9" height="15.0" fill="rgb(228,96,41)" rx="2" ry="2" />
<text  x="67.90" y="1871.5" ></text>
</g>
<g >
<title>std::locale::~locale (7 samples, 0.05%)</title><rect x="633.2" y="1941" width="0.5" height="15.0" fill="rgb(211,22,42)" rx="2" ry="2" />
<text  x="636.15" y="1951.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcFeatures (213 samples, 1.54%)</title><rect x="189.7" y="1973" width="18.1" height="15.0" fill="rgb(207,173,36)" rx="2" ry="2" />
<text  x="192.69" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1397" width="6.9" height="15.0" fill="rgb(252,43,3)" rx="2" ry="2" />
<text  x="67.90" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="309" width="0.5" height="15.0" fill="rgb(217,217,47)" rx="2" ry="2" />
<text  x="1184.66" y="319.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="949" width="6.8" height="15.0" fill="rgb(240,38,26)" rx="2" ry="2" />
<text  x="67.90" y="959.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="261" width="6.8" height="15.0" fill="rgb(236,95,17)" rx="2" ry="2" />
<text  x="67.90" y="271.5" ></text>
</g>
<g >
<title>[unknown] (39 samples, 0.28%)</title><rect x="65.0" y="53" width="3.3" height="15.0" fill="rgb(254,179,2)" rx="2" ry="2" />
<text  x="67.99" y="63.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (2 samples, 0.01%)</title><rect x="100.7" y="2021" width="0.1" height="15.0" fill="rgb(221,81,7)" rx="2" ry="2" />
<text  x="103.65" y="2031.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (2,153 samples, 15.53%)</title><rect x="453.7" y="2005" width="183.3" height="15.0" fill="rgb(214,207,48)" rx="2" ry="2" />
<text  x="456.72" y="2015.5" >std::_Function_handler&lt;..</text>
</g>
<g >
<title>at::Tensor::is_view (3 samples, 0.02%)</title><rect x="472.7" y="1877" width="0.3" height="15.0" fill="rgb(222,19,40)" rx="2" ry="2" />
<text  x="475.71" y="1887.5" ></text>
</g>
<g >
<title>torch::jit::GraphExecutorImplBase::run (39 samples, 0.28%)</title><rect x="1150.1" y="1989" width="3.3" height="15.0" fill="rgb(226,164,28)" rx="2" ry="2" />
<text  x="1153.08" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="746.1" y="2021" width="0.2" height="15.0" fill="rgb(245,74,41)" rx="2" ry="2" />
<text  x="749.11" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (20 samples, 0.14%)</title><rect x="457.6" y="1925" width="1.7" height="15.0" fill="rgb(211,205,42)" rx="2" ry="2" />
<text  x="460.55" y="1935.5" ></text>
</g>
<g >
<title>at::native::(anonymous namespace)::add_kernel (4 samples, 0.03%)</title><rect x="1152.2" y="1861" width="0.3" height="15.0" fill="rgb(208,132,48)" rx="2" ry="2" />
<text  x="1155.21" y="1871.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (13 samples, 0.09%)</title><rect x="1152.0" y="1941" width="1.1" height="15.0" fill="rgb(206,173,19)" rx="2" ry="2" />
<text  x="1154.95" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1061" width="6.8" height="15.0" fill="rgb(226,80,12)" rx="2" ry="2" />
<text  x="67.90" y="1071.5" ></text>
</g>
<g >
<title>at::Tensor::_version (2 samples, 0.01%)</title><rect x="68.3" y="53" width="0.2" height="15.0" fill="rgb(237,15,33)" rx="2" ry="2" />
<text  x="71.31" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.06%)</title><rect x="1181.5" y="1845" width="0.7" height="15.0" fill="rgb(249,100,2)" rx="2" ry="2" />
<text  x="1184.49" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="421" width="0.2" height="15.0" fill="rgb(243,34,36)" rx="2" ry="2" />
<text  x="461.49" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (20 samples, 0.14%)</title><rect x="457.6" y="1893" width="1.7" height="15.0" fill="rgb(235,120,35)" rx="2" ry="2" />
<text  x="460.55" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1182.0" y="37" width="0.2" height="15.0" fill="rgb(239,202,31)" rx="2" ry="2" />
<text  x="1185.00" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1349" width="0.5" height="15.0" fill="rgb(206,144,17)" rx="2" ry="2" />
<text  x="1185.34" y="1359.5" ></text>
</g>
<g >
<title>[unknown] (18 samples, 0.13%)</title><rect x="645.5" y="2021" width="1.5" height="15.0" fill="rgb(237,66,10)" rx="2" ry="2" />
<text  x="648.50" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="293" width="6.8" height="15.0" fill="rgb(237,192,0)" rx="2" ry="2" />
<text  x="67.90" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1181.6" y="1589" width="0.6" height="15.0" fill="rgb(236,3,43)" rx="2" ry="2" />
<text  x="1184.57" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1269" width="6.8" height="15.0" fill="rgb(237,188,53)" rx="2" ry="2" />
<text  x="67.90" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1509" width="6.9" height="15.0" fill="rgb(254,33,43)" rx="2" ry="2" />
<text  x="67.90" y="1519.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (4 samples, 0.03%)</title><rect x="1178.4" y="2053" width="0.4" height="15.0" fill="rgb(231,217,6)" rx="2" ry="2" />
<text  x="1181.42" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="709" width="6.8" height="15.0" fill="rgb(235,97,24)" rx="2" ry="2" />
<text  x="67.90" y="719.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1221" width="6.8" height="15.0" fill="rgb(228,49,38)" rx="2" ry="2" />
<text  x="67.90" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1477" width="0.5" height="15.0" fill="rgb(233,95,39)" rx="2" ry="2" />
<text  x="1184.66" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="357" width="0.5" height="15.0" fill="rgb(234,72,43)" rx="2" ry="2" />
<text  x="1184.66" y="367.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1685" width="6.9" height="15.0" fill="rgb(235,229,0)" rx="2" ry="2" />
<text  x="67.90" y="1695.5" ></text>
</g>
<g >
<title>c10::OperatorHandle::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (13 samples, 0.09%)</title><rect x="475.1" y="1877" width="1.1" height="15.0" fill="rgb(224,160,21)" rx="2" ry="2" />
<text  x="478.09" y="1887.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (5 samples, 0.04%)</title><rect x="177.9" y="1925" width="0.4" height="15.0" fill="rgb(224,214,15)" rx="2" ry="2" />
<text  x="180.85" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="981" width="0.2" height="15.0" fill="rgb(239,196,31)" rx="2" ry="2" />
<text  x="461.49" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1557" width="0.5" height="15.0" fill="rgb(242,169,21)" rx="2" ry="2" />
<text  x="1184.66" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="1061" width="0.2" height="15.0" fill="rgb(234,220,30)" rx="2" ry="2" />
<text  x="461.49" y="1071.5" ></text>
</g>
<g >
<title>c10::TensorImpl::release_resources (5 samples, 0.04%)</title><rect x="643.3" y="2005" width="0.4" height="15.0" fill="rgb(210,155,40)" rx="2" ry="2" />
<text  x="646.28" y="2015.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (2 samples, 0.01%)</title><rect x="455.8" y="1941" width="0.1" height="15.0" fill="rgb(210,15,23)" rx="2" ry="2" />
<text  x="458.77" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1045" width="0.5" height="15.0" fill="rgb(215,87,0)" rx="2" ry="2" />
<text  x="1184.66" y="1055.5" ></text>
</g>
<g >
<title>torch::autograd::impl::gradient_edge (6 samples, 0.04%)</title><rect x="746.3" y="2037" width="0.5" height="15.0" fill="rgb(241,109,19)" rx="2" ry="2" />
<text  x="749.28" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (18 samples, 0.13%)</title><rect x="457.7" y="1845" width="1.6" height="15.0" fill="rgb(235,148,24)" rx="2" ry="2" />
<text  x="460.72" y="1855.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (6 samples, 0.04%)</title><rect x="69.7" y="85" width="0.5" height="15.0" fill="rgb(229,18,33)" rx="2" ry="2" />
<text  x="72.67" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="459.1" y="1413" width="0.2" height="15.0" fill="rgb(228,83,53)" rx="2" ry="2" />
<text  x="462.09" y="1423.5" ></text>
</g>
<g >
<title>at::native::copy_ (20 samples, 0.14%)</title><rect x="756.5" y="2053" width="1.7" height="15.0" fill="rgb(236,123,49)" rx="2" ry="2" />
<text  x="759.49" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="965" width="0.2" height="15.0" fill="rgb(226,35,36)" rx="2" ry="2" />
<text  x="461.49" y="975.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="901" width="6.8" height="15.0" fill="rgb(214,101,46)" rx="2" ry="2" />
<text  x="67.90" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="949" width="0.5" height="15.0" fill="rgb(208,110,0)" rx="2" ry="2" />
<text  x="1185.34" y="959.5" ></text>
</g>
<g >
<title>TNewsCluster::AddDocument (3 samples, 0.02%)</title><rect x="210.3" y="1973" width="0.2" height="15.0" fill="rgb(251,52,17)" rx="2" ry="2" />
<text  x="213.28" y="1983.5" ></text>
</g>
<g >
<title>at::native::mm_cpu_out (4 samples, 0.03%)</title><rect x="70.2" y="101" width="0.3" height="15.0" fill="rgb(231,227,54)" rx="2" ry="2" />
<text  x="73.18" y="111.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::load (8 samples, 0.06%)</title><rect x="826.7" y="2053" width="0.7" height="15.0" fill="rgb(226,120,12)" rx="2" ry="2" />
<text  x="829.71" y="2063.5" ></text>
</g>
<g >
<title>c10::ClassType::methods@plt (2 samples, 0.01%)</title><rect x="1147.0" y="2021" width="0.2" height="15.0" fill="rgb(227,130,16)" rx="2" ry="2" />
<text  x="1150.02" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="517" width="6.8" height="15.0" fill="rgb(235,152,34)" rx="2" ry="2" />
<text  x="67.90" y="527.5" ></text>
</g>
<g >
<title>at::native::fill_out (2 samples, 0.01%)</title><rect x="70.0" y="53" width="0.2" height="15.0" fill="rgb(244,43,13)" rx="2" ry="2" />
<text  x="73.01" y="63.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.04%)</title><rect x="745.6" y="2021" width="0.4" height="15.0" fill="rgb(233,78,4)" rx="2" ry="2" />
<text  x="748.60" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="209.8" y="1845" width="0.2" height="15.0" fill="rgb(237,178,33)" rx="2" ry="2" />
<text  x="212.77" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (4 samples, 0.03%)</title><rect x="743.8" y="2037" width="0.3" height="15.0" fill="rgb(223,212,33)" rx="2" ry="2" />
<text  x="746.81" y="2047.5" ></text>
</g>
<g >
<title>at::namedinference::propagate_names_if_nonempty (4 samples, 0.03%)</title><rect x="637.9" y="2037" width="0.4" height="15.0" fill="rgb(219,68,2)" rx="2" ry="2" />
<text  x="640.92" y="2047.5" ></text>
</g>
<g >
<title>cfree (5 samples, 0.04%)</title><rect x="481.0" y="1941" width="0.5" height="15.0" fill="rgb(210,14,37)" rx="2" ry="2" />
<text  x="484.05" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1653" width="0.5" height="15.0" fill="rgb(235,0,21)" rx="2" ry="2" />
<text  x="1185.34" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1181.7" y="149" width="0.5" height="15.0" fill="rgb(238,86,24)" rx="2" ry="2" />
<text  x="1184.74" y="159.5" ></text>
</g>
<g >
<title>at::native::empty_cpu (2 samples, 0.01%)</title><rect x="637.2" y="2021" width="0.2" height="15.0" fill="rgb(239,14,33)" rx="2" ry="2" />
<text  x="640.24" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1125" width="0.5" height="15.0" fill="rgb(208,36,38)" rx="2" ry="2" />
<text  x="1185.34" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="209.8" y="1733" width="0.1" height="15.0" fill="rgb(240,28,35)" rx="2" ry="2" />
<text  x="212.77" y="1743.5" ></text>
</g>
<g >
<title>c10::detail::make_boxed_from_unboxed_functor&lt;c10::detail::WrapKernelFunction_&lt;bool  (2 samples, 0.01%)</title><rect x="79.7" y="2021" width="0.2" height="15.0" fill="rgb(244,166,10)" rx="2" ry="2" />
<text  x="82.71" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="821" width="0.5" height="15.0" fill="rgb(238,212,30)" rx="2" ry="2" />
<text  x="1184.66" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1285" width="0.5" height="15.0" fill="rgb(212,77,14)" rx="2" ry="2" />
<text  x="1185.34" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="293" width="0.5" height="15.0" fill="rgb(234,81,36)" rx="2" ry="2" />
<text  x="1184.66" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="209.8" y="1765" width="0.2" height="15.0" fill="rgb(231,159,5)" rx="2" ry="2" />
<text  x="212.77" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="501" width="0.2" height="15.0" fill="rgb(241,162,17)" rx="2" ry="2" />
<text  x="461.49" y="511.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::Load (2 samples, 0.01%)</title><rect x="445.2" y="1989" width="0.2" height="15.0" fill="rgb(213,137,15)" rx="2" ry="2" />
<text  x="448.21" y="1999.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (20 samples, 0.14%)</title><rect x="1062.0" y="2053" width="1.7" height="15.0" fill="rgb(252,56,7)" rx="2" ry="2" />
<text  x="1064.98" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1205" width="0.5" height="15.0" fill="rgb(226,200,31)" rx="2" ry="2" />
<text  x="1184.66" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="209.8" y="1621" width="0.1" height="15.0" fill="rgb(234,39,42)" rx="2" ry="2" />
<text  x="212.77" y="1631.5" ></text>
</g>
<g >
<title>caffe2::TypeMeta::_typeMetaDataInstance&lt;float&gt; (2 samples, 0.01%)</title><rect x="480.9" y="1941" width="0.1" height="15.0" fill="rgb(253,206,29)" rx="2" ry="2" />
<text  x="483.88" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="629" width="0.2" height="15.0" fill="rgb(229,141,10)" rx="2" ry="2" />
<text  x="461.49" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1061" width="0.5" height="15.0" fill="rgb(218,164,47)" rx="2" ry="2" />
<text  x="1185.34" y="1071.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="789" width="6.8" height="15.0" fill="rgb(231,226,32)" rx="2" ry="2" />
<text  x="67.90" y="799.5" ></text>
</g>
<g >
<title>strlen@plt (24 samples, 0.17%)</title><rect x="1187.5" y="2053" width="2.1" height="15.0" fill="rgb(243,24,38)" rx="2" ry="2" />
<text  x="1190.53" y="2063.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (6 samples, 0.04%)</title><rect x="61.8" y="1973" width="0.5" height="15.0" fill="rgb(236,228,35)" rx="2" ry="2" />
<text  x="64.75" y="1983.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (5 samples, 0.04%)</title><rect x="81.8" y="2021" width="0.4" height="15.0" fill="rgb(218,75,41)" rx="2" ry="2" />
<text  x="84.76" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1605" width="0.5" height="15.0" fill="rgb(230,180,33)" rx="2" ry="2" />
<text  x="1185.34" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1461" width="0.5" height="15.0" fill="rgb(235,172,47)" rx="2" ry="2" />
<text  x="1184.66" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="458.1" y="1621" width="0.6" height="15.0" fill="rgb(224,136,34)" rx="2" ry="2" />
<text  x="461.15" y="1631.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="201.3" y="1925" width="0.1" height="15.0" fill="rgb(251,228,35)" rx="2" ry="2" />
<text  x="204.26" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1045" width="6.8" height="15.0" fill="rgb(207,0,36)" rx="2" ry="2" />
<text  x="67.90" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="341" width="0.2" height="15.0" fill="rgb(224,137,23)" rx="2" ry="2" />
<text  x="461.49" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector&lt;long const*, void&gt; (2 samples, 0.01%)</title><rect x="472.2" y="1877" width="0.2" height="15.0" fill="rgb(234,207,2)" rx="2" ry="2" />
<text  x="475.19" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1237" width="0.5" height="15.0" fill="rgb(229,59,6)" rx="2" ry="2" />
<text  x="1184.66" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="181" width="0.5" height="15.0" fill="rgb(240,4,4)" rx="2" ry="2" />
<text  x="1185.34" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="933" width="0.5" height="15.0" fill="rgb(223,40,17)" rx="2" ry="2" />
<text  x="1184.66" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1125" width="0.5" height="15.0" fill="rgb(254,114,54)" rx="2" ry="2" />
<text  x="1184.66" y="1135.5" ></text>
</g>
<g >
<title>TDbDocument::TDbDocument (2 samples, 0.01%)</title><rect x="189.4" y="1989" width="0.2" height="15.0" fill="rgb(210,62,43)" rx="2" ry="2" />
<text  x="192.43" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="1093" width="0.2" height="15.0" fill="rgb(239,228,46)" rx="2" ry="2" />
<text  x="461.49" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="325" width="0.5" height="15.0" fill="rgb(242,223,28)" rx="2" ry="2" />
<text  x="1185.34" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="581" width="0.2" height="15.0" fill="rgb(222,59,18)" rx="2" ry="2" />
<text  x="461.49" y="591.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (7 samples, 0.05%)</title><rect x="760.5" y="2021" width="0.6" height="15.0" fill="rgb(229,92,34)" rx="2" ry="2" />
<text  x="763.49" y="2031.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append (9 samples, 0.06%)</title><rect x="1024.0" y="2053" width="0.8" height="15.0" fill="rgb(233,83,9)" rx="2" ry="2" />
<text  x="1027.02" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (32 samples, 0.23%)</title><rect x="446.6" y="1957" width="2.7" height="15.0" fill="rgb(216,172,14)" rx="2" ry="2" />
<text  x="449.57" y="1967.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (85 samples, 0.61%)</title><rect x="51.9" y="2037" width="7.2" height="15.0" fill="rgb(237,207,25)" rx="2" ry="2" />
<text  x="54.88" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="1109" width="0.2" height="15.0" fill="rgb(237,159,54)" rx="2" ry="2" />
<text  x="461.49" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.1" y="1333" width="0.2" height="15.0" fill="rgb(209,108,37)" rx="2" ry="2" />
<text  x="462.09" y="1343.5" ></text>
</g>
<g >
<title>nlohmann::detail::dtoa_impl::grisu2_digit_gen (4 samples, 0.03%)</title><rect x="1023.7" y="2053" width="0.3" height="15.0" fill="rgb(235,184,27)" rx="2" ry="2" />
<text  x="1026.68" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1429" width="0.5" height="15.0" fill="rgb(211,97,28)" rx="2" ry="2" />
<text  x="1184.66" y="1439.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (2 samples, 0.01%)</title><rect x="478.6" y="1893" width="0.1" height="15.0" fill="rgb(246,116,11)" rx="2" ry="2" />
<text  x="481.58" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12 samples, 0.09%)</title><rect x="1181.1" y="2053" width="1.1" height="15.0" fill="rgb(250,160,27)" rx="2" ry="2" />
<text  x="1184.15" y="2063.5" ></text>
</g>
<g >
<title>cfree (2 samples, 0.01%)</title><rect x="446.1" y="1989" width="0.1" height="15.0" fill="rgb(252,18,10)" rx="2" ry="2" />
<text  x="449.06" y="1999.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (115 samples, 0.83%)</title><rect x="1052.2" y="2037" width="9.8" height="15.0" fill="rgb(243,30,35)" rx="2" ry="2" />
<text  x="1055.19" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="209.8" y="1797" width="0.2" height="15.0" fill="rgb(235,207,7)" rx="2" ry="2" />
<text  x="212.77" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="458.1" y="1557" width="0.6" height="15.0" fill="rgb(253,59,3)" rx="2" ry="2" />
<text  x="461.15" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="741" width="0.5" height="15.0" fill="rgb(251,195,29)" rx="2" ry="2" />
<text  x="1185.34" y="751.5" ></text>
</g>
<g >
<title>TClusterer::TClusterer (2 samples, 0.01%)</title><rect x="445.2" y="2005" width="0.2" height="15.0" fill="rgb(239,45,5)" rx="2" ry="2" />
<text  x="448.21" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="485" width="0.2" height="15.0" fill="rgb(219,22,21)" rx="2" ry="2" />
<text  x="461.49" y="495.5" ></text>
</g>
<g >
<title>at::TensorIterator::compute_fast_setup_type (2 samples, 0.01%)</title><rect x="70.5" y="37" width="0.2" height="15.0" fill="rgb(209,168,30)" rx="2" ry="2" />
<text  x="73.52" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1182.4" y="37" width="0.4" height="15.0" fill="rgb(222,132,19)" rx="2" ry="2" />
<text  x="1185.42" y="47.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="447.1" y="1893" width="0.2" height="15.0" fill="rgb(241,203,52)" rx="2" ry="2" />
<text  x="450.08" y="1903.5" ></text>
</g>
<g >
<title>fasttext::SoftmaxLoss::computeOutput (3 samples, 0.02%)</title><rect x="998.5" y="2053" width="0.2" height="15.0" fill="rgb(241,165,6)" rx="2" ry="2" />
<text  x="1001.48" y="2063.5" ></text>
</g>
<g >
<title>cfree (4 samples, 0.03%)</title><rect x="442.8" y="1989" width="0.4" height="15.0" fill="rgb(215,220,24)" rx="2" ry="2" />
<text  x="445.83" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1205" width="6.8" height="15.0" fill="rgb(254,165,46)" rx="2" ry="2" />
<text  x="67.90" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="677" width="6.8" height="15.0" fill="rgb(220,229,33)" rx="2" ry="2" />
<text  x="67.90" y="687.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::clear (2 samples, 0.01%)</title><rect x="1024.8" y="2053" width="0.2" height="15.0" fill="rgb(250,35,38)" rx="2" ry="2" />
<text  x="1027.78" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="645" width="0.5" height="15.0" fill="rgb(230,55,49)" rx="2" ry="2" />
<text  x="1185.34" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1181.6" y="1669" width="0.6" height="15.0" fill="rgb(245,189,51)" rx="2" ry="2" />
<text  x="1184.57" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="389" width="0.2" height="15.0" fill="rgb(206,32,48)" rx="2" ry="2" />
<text  x="461.49" y="399.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (2,154 samples, 15.54%)</title><rect x="453.6" y="2021" width="183.4" height="15.0" fill="rgb(252,149,46)" rx="2" ry="2" />
<text  x="456.64" y="2031.5" >std::__future_base::_St..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1557" width="0.5" height="15.0" fill="rgb(225,128,48)" rx="2" ry="2" />
<text  x="1185.34" y="1567.5" ></text>
</g>
<g >
<title>onmt::unicode::cp_to_utf8[abi:cxx11] (4 samples, 0.03%)</title><rect x="1070.2" y="2053" width="0.3" height="15.0" fill="rgb(220,8,18)" rx="2" ry="2" />
<text  x="1073.15" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1493" width="0.5" height="15.0" fill="rgb(245,33,0)" rx="2" ry="2" />
<text  x="1185.34" y="1503.5" ></text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, TDbDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (18 samples, 0.13%)</title><rect x="443.4" y="1973" width="1.6" height="15.0" fill="rgb(218,135,49)" rx="2" ry="2" />
<text  x="446.42" y="1983.5" ></text>
</g>
<g >
<title>at::native::copy_impl (16 samples, 0.12%)</title><rect x="756.7" y="2037" width="1.3" height="15.0" fill="rgb(235,134,25)" rx="2" ry="2" />
<text  x="759.66" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="261" width="0.5" height="15.0" fill="rgb(229,125,54)" rx="2" ry="2" />
<text  x="1184.66" y="271.5" ></text>
</g>
<g >
<title>[unknown] (62 samples, 0.45%)</title><rect x="1148.3" y="2021" width="5.3" height="15.0" fill="rgb(223,149,12)" rx="2" ry="2" />
<text  x="1151.29" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::_M_realloc_insert&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="452.9" y="2005" width="0.1" height="15.0" fill="rgb(247,173,24)" rx="2" ry="2" />
<text  x="455.87" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1365" width="0.5" height="15.0" fill="rgb(226,116,22)" rx="2" ry="2" />
<text  x="1185.34" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="53" width="0.5" height="15.0" fill="rgb(211,154,21)" rx="2" ry="2" />
<text  x="1185.34" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1181.6" y="1717" width="0.6" height="15.0" fill="rgb(228,213,48)" rx="2" ry="2" />
<text  x="1184.57" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (23 samples, 0.17%)</title><rect x="457.4" y="1941" width="1.9" height="15.0" fill="rgb(249,210,5)" rx="2" ry="2" />
<text  x="460.38" y="1951.5" ></text>
</g>
<g >
<title>torch::zeros (13 samples, 0.09%)</title><rect x="477.7" y="1925" width="1.1" height="15.0" fill="rgb(248,148,54)" rx="2" ry="2" />
<text  x="480.73" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="458.1" y="1717" width="0.6" height="15.0" fill="rgb(247,26,31)" rx="2" ry="2" />
<text  x="461.15" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="837" width="0.5" height="15.0" fill="rgb(241,216,36)" rx="2" ry="2" />
<text  x="1185.34" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="209.6" y="1909" width="0.4" height="15.0" fill="rgb(206,85,41)" rx="2" ry="2" />
<text  x="212.60" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="458.9" y="1557" width="0.4" height="15.0" fill="rgb(241,182,8)" rx="2" ry="2" />
<text  x="461.92" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="209.8" y="1605" width="0.1" height="15.0" fill="rgb(229,95,36)" rx="2" ry="2" />
<text  x="212.77" y="1615.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::readWord (76 samples, 0.55%)</title><rect x="863.1" y="2053" width="6.5" height="15.0" fill="rgb(231,19,15)" rx="2" ry="2" />
<text  x="866.14" y="2063.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (2 samples, 0.01%)</title><rect x="759.6" y="2005" width="0.2" height="15.0" fill="rgb(231,223,21)" rx="2" ry="2" />
<text  x="762.64" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (130 samples, 0.94%)</title><rect x="61.8" y="1989" width="11.0" height="15.0" fill="rgb(246,29,37)" rx="2" ry="2" />
<text  x="64.75" y="1999.5" ></text>
</g>
<g >
<title>torch::autograd::impl::grad_accumulator (2 samples, 0.01%)</title><rect x="642.1" y="1989" width="0.2" height="15.0" fill="rgb(219,186,21)" rx="2" ry="2" />
<text  x="645.09" y="1999.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::s__th_addmm_out (4 samples, 0.03%)</title><rect x="70.2" y="69" width="0.3" height="15.0" fill="rgb(221,98,53)" rx="2" ry="2" />
<text  x="73.18" y="79.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="181" width="6.8" height="15.0" fill="rgb(226,126,48)" rx="2" ry="2" />
<text  x="67.90" y="191.5" ></text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;TNewsCluster*, std::vector&lt;TNewsCluster, std::allocator&lt;TNewsCluster&gt; &gt; &gt;, TNewsCluster*, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (3 samples, 0.02%)</title><rect x="445.0" y="1973" width="0.2" height="15.0" fill="rgb(220,28,32)" rx="2" ry="2" />
<text  x="447.96" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="459.0" y="1429" width="0.3" height="15.0" fill="rgb(246,80,48)" rx="2" ry="2" />
<text  x="462.00" y="1439.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (12 samples, 0.09%)</title><rect x="459.8" y="1941" width="1.0" height="15.0" fill="rgb(221,45,53)" rx="2" ry="2" />
<text  x="462.77" y="1951.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::initNgrams (2 samples, 0.01%)</title><rect x="826.5" y="2053" width="0.2" height="15.0" fill="rgb(232,59,22)" rx="2" ry="2" />
<text  x="829.54" y="2063.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.06%)</title><rect x="192.2" y="1925" width="0.8" height="15.0" fill="rgb(224,204,31)" rx="2" ry="2" />
<text  x="195.24" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="613" width="6.8" height="15.0" fill="rgb(238,96,53)" rx="2" ry="2" />
<text  x="67.90" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1182.2" y="2005" width="0.6" height="15.0" fill="rgb(217,75,37)" rx="2" ry="2" />
<text  x="1185.17" y="2015.5" ></text>
</g>
<g >
<title>c10::TensorImpl::size (3 samples, 0.02%)</title><rect x="644.0" y="2005" width="0.2" height="15.0" fill="rgb(241,30,17)" rx="2" ry="2" />
<text  x="646.96" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::vector (2 samples, 0.01%)</title><rect x="452.1" y="1909" width="0.2" height="15.0" fill="rgb(223,80,3)" rx="2" ry="2" />
<text  x="455.11" y="1919.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="451.0" y="1989" width="0.2" height="15.0" fill="rgb(208,166,49)" rx="2" ry="2" />
<text  x="454.00" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="725" width="0.2" height="15.0" fill="rgb(244,197,52)" rx="2" ry="2" />
<text  x="461.49" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1061" width="0.5" height="15.0" fill="rgb(253,31,30)" rx="2" ry="2" />
<text  x="1184.66" y="1071.5" ></text>
</g>
<g >
<title>at::Tensor::squeeze (4 samples, 0.03%)</title><rect x="470.5" y="1925" width="0.3" height="15.0" fill="rgb(231,136,29)" rx="2" ry="2" />
<text  x="473.49" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="725" width="0.5" height="15.0" fill="rgb(239,217,1)" rx="2" ry="2" />
<text  x="1185.34" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="757" width="0.2" height="15.0" fill="rgb(213,45,25)" rx="2" ry="2" />
<text  x="461.49" y="767.5" ></text>
</g>
<g >
<title>Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;float, float&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;float, float&gt;, Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_opposite_op&lt;float&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::ArrayWrapper&lt;Eigen::Product&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;, 0&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt;, Eigen::internal::assign_op&lt;float, float&gt; &gt; (110 samples, 0.79%)</title><rect x="433.0" y="1941" width="9.4" height="15.0" fill="rgb(243,19,19)" rx="2" ry="2" />
<text  x="436.04" y="1951.5" ></text>
</g>
<g >
<title>DetectLanguage (8 samples, 0.06%)</title><rect x="456.5" y="1957" width="0.7" height="15.0" fill="rgb(246,215,14)" rx="2" ry="2" />
<text  x="459.53" y="1967.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (28 samples, 0.20%)</title><rect x="687.6" y="2037" width="2.4" height="15.0" fill="rgb(240,123,42)" rx="2" ry="2" />
<text  x="690.63" y="2047.5" ></text>
</g>
<g >
<title>TNewsCluster::TNewsCluster (4 samples, 0.03%)</title><rect x="445.6" y="2005" width="0.4" height="15.0" fill="rgb(213,158,45)" rx="2" ry="2" />
<text  x="448.64" y="2015.5" ></text>
</g>
<g >
<title>at::native::mm_cpu_out (3 samples, 0.02%)</title><rect x="68.5" y="53" width="0.2" height="15.0" fill="rgb(253,221,39)" rx="2" ry="2" />
<text  x="71.48" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="341" width="0.5" height="15.0" fill="rgb(253,169,53)" rx="2" ry="2" />
<text  x="1185.34" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (10 samples, 0.07%)</title><rect x="202.5" y="1941" width="0.9" height="15.0" fill="rgb(253,36,11)" rx="2" ry="2" />
<text  x="205.54" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1381" width="0.5" height="15.0" fill="rgb(237,87,52)" rx="2" ry="2" />
<text  x="1184.66" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1525" width="0.5" height="15.0" fill="rgb(206,217,30)" rx="2" ry="2" />
<text  x="1184.66" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="458.1" y="1669" width="0.6" height="15.0" fill="rgb(209,35,10)" rx="2" ry="2" />
<text  x="461.15" y="1679.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (2 samples, 0.01%)</title><rect x="757.1" y="2021" width="0.2" height="15.0" fill="rgb(237,112,14)" rx="2" ry="2" />
<text  x="760.09" y="2031.5" ></text>
</g>
<g >
<title>c10::TensorImpl::shallow_copy_and_detach (3 samples, 0.02%)</title><rect x="643.7" y="2005" width="0.3" height="15.0" fill="rgb(245,73,37)" rx="2" ry="2" />
<text  x="646.71" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1182.3" y="1861" width="0.5" height="15.0" fill="rgb(208,37,24)" rx="2" ry="2" />
<text  x="1185.25" y="1871.5" ></text>
</g>
<g >
<title>mkl_blas__sgemm (2 samples, 0.01%)</title><rect x="644.4" y="2005" width="0.2" height="15.0" fill="rgb(252,135,19)" rx="2" ry="2" />
<text  x="647.39" y="2015.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (11 samples, 0.08%)</title><rect x="475.2" y="1813" width="0.9" height="15.0" fill="rgb(215,129,46)" rx="2" ry="2" />
<text  x="478.17" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1525" width="6.9" height="15.0" fill="rgb(218,71,14)" rx="2" ry="2" />
<text  x="67.90" y="1535.5" ></text>
</g>
<g >
<title>c10::impl::tls_local_dispatch_key_set (2 samples, 0.01%)</title><rect x="474.5" y="1925" width="0.2" height="15.0" fill="rgb(232,6,40)" rx="2" ry="2" />
<text  x="477.49" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="197" width="0.5" height="15.0" fill="rgb(205,56,36)" rx="2" ry="2" />
<text  x="1184.66" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (16 samples, 0.12%)</title><rect x="697.0" y="2021" width="1.4" height="15.0" fill="rgb(244,206,7)" rx="2" ry="2" />
<text  x="699.99" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1605" width="6.9" height="15.0" fill="rgb(214,194,31)" rx="2" ry="2" />
<text  x="67.90" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.1" y="1237" width="0.2" height="15.0" fill="rgb(226,62,21)" rx="2" ry="2" />
<text  x="462.09" y="1247.5" ></text>
</g>
<g >
<title>[unknown] (27 samples, 0.19%)</title><rect x="639.3" y="2005" width="2.3" height="15.0" fill="rgb(254,68,45)" rx="2" ry="2" />
<text  x="642.28" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="209.8" y="1509" width="0.1" height="15.0" fill="rgb(223,26,25)" rx="2" ry="2" />
<text  x="212.77" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1182.3" y="1845" width="0.5" height="15.0" fill="rgb(226,93,19)" rx="2" ry="2" />
<text  x="1185.25" y="1855.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (2 samples, 0.01%)</title><rect x="637.2" y="2037" width="0.2" height="15.0" fill="rgb(218,115,10)" rx="2" ry="2" />
<text  x="640.24" y="2047.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getId (3 samples, 0.02%)</title><rect x="81.5" y="2021" width="0.3" height="15.0" fill="rgb(205,167,39)" rx="2" ry="2" />
<text  x="84.50" y="2031.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="735.6" y="2037" width="0.1" height="15.0" fill="rgb(220,88,42)" rx="2" ry="2" />
<text  x="738.55" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1333" width="0.5" height="15.0" fill="rgb(221,194,34)" rx="2" ry="2" />
<text  x="1184.66" y="1343.5" ></text>
</g>
<g >
<title>c10::TensorType::isSubtypeOfExt (5 samples, 0.04%)</title><rect x="645.1" y="2005" width="0.4" height="15.0" fill="rgb(221,228,46)" rx="2" ry="2" />
<text  x="648.07" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1285" width="0.5" height="15.0" fill="rgb(238,202,17)" rx="2" ry="2" />
<text  x="1184.66" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (17 samples, 0.12%)</title><rect x="457.8" y="1797" width="1.5" height="15.0" fill="rgb(234,96,28)" rx="2" ry="2" />
<text  x="460.81" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1181.7" y="101" width="0.5" height="15.0" fill="rgb(220,112,44)" rx="2" ry="2" />
<text  x="1184.74" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1181.7" y="53" width="0.5" height="15.0" fill="rgb(249,111,33)" rx="2" ry="2" />
<text  x="1184.74" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1221" width="0.5" height="15.0" fill="rgb(243,93,53)" rx="2" ry="2" />
<text  x="1185.34" y="1231.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1781" width="6.9" height="15.0" fill="rgb(254,168,19)" rx="2" ry="2" />
<text  x="67.90" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="661" width="6.8" height="15.0" fill="rgb(217,223,8)" rx="2" ry="2" />
<text  x="67.90" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1253" width="0.5" height="15.0" fill="rgb(234,145,45)" rx="2" ry="2" />
<text  x="1185.34" y="1263.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (2 samples, 0.01%)</title><rect x="452.9" y="1829" width="0.1" height="15.0" fill="rgb(225,100,54)" rx="2" ry="2" />
<text  x="455.87" y="1839.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (75 samples, 0.54%)</title><rect x="181.8" y="1925" width="6.4" height="15.0" fill="rgb(249,153,41)" rx="2" ry="2" />
<text  x="184.77" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1301" width="6.8" height="15.0" fill="rgb(238,192,23)" rx="2" ry="2" />
<text  x="67.90" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="459.0" y="1445" width="0.3" height="15.0" fill="rgb(207,207,14)" rx="2" ry="2" />
<text  x="462.00" y="1455.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (15 samples, 0.11%)</title><rect x="461.2" y="1925" width="1.3" height="15.0" fill="rgb(247,147,0)" rx="2" ry="2" />
<text  x="464.21" y="1935.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (4 samples, 0.03%)</title><rect x="194.3" y="1925" width="0.3" height="15.0" fill="rgb(226,48,19)" rx="2" ry="2" />
<text  x="197.28" y="1935.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (7 samples, 0.05%)</title><rect x="80.7" y="2021" width="0.6" height="15.0" fill="rgb(251,223,0)" rx="2" ry="2" />
<text  x="83.73" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="341" width="0.5" height="15.0" fill="rgb(211,109,39)" rx="2" ry="2" />
<text  x="1184.66" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1181.7" y="133" width="0.5" height="15.0" fill="rgb(249,71,22)" rx="2" ry="2" />
<text  x="1184.74" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="309" width="0.5" height="15.0" fill="rgb(211,159,16)" rx="2" ry="2" />
<text  x="1185.34" y="319.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;::PlainObjectBase&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt; &gt; (23 samples, 0.17%)</title><rect x="431.1" y="1941" width="1.9" height="15.0" fill="rgb(206,148,12)" rx="2" ry="2" />
<text  x="434.08" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="533" width="0.5" height="15.0" fill="rgb(240,9,9)" rx="2" ry="2" />
<text  x="1185.34" y="543.5" ></text>
</g>
<g >
<title>at::native::empty_cpu (3 samples, 0.02%)</title><rect x="760.6" y="2005" width="0.2" height="15.0" fill="rgb(214,132,28)" rx="2" ry="2" />
<text  x="763.58" y="2015.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (2 samples, 0.01%)</title><rect x="647.2" y="2037" width="0.2" height="15.0" fill="rgb(223,2,38)" rx="2" ry="2" />
<text  x="650.20" y="2047.5" ></text>
</g>
<g >
<title>at::TensorIterator::nullary_op (7 samples, 0.05%)</title><rect x="70.5" y="69" width="0.6" height="15.0" fill="rgb(232,112,11)" rx="2" ry="2" />
<text  x="73.52" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1181.6" y="1765" width="0.6" height="15.0" fill="rgb(213,24,6)" rx="2" ry="2" />
<text  x="1184.57" y="1775.5" ></text>
</g>
<g >
<title>TEmbedder::CalcEmbedding (1,964 samples, 14.17%)</title><rect x="467.1" y="1957" width="167.2" height="15.0" fill="rgb(228,116,4)" rx="2" ry="2" />
<text  x="470.09" y="1967.5" >TEmbedder::CalcEmbedd..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1182.3" y="1733" width="0.5" height="15.0" fill="rgb(247,140,14)" rx="2" ry="2" />
<text  x="1185.25" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1182.3" y="1925" width="0.5" height="15.0" fill="rgb(215,55,54)" rx="2" ry="2" />
<text  x="1185.25" y="1935.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::_th_addmm_out (2 samples, 0.01%)</title><rect x="69.5" y="69" width="0.2" height="15.0" fill="rgb(233,144,1)" rx="2" ry="2" />
<text  x="72.50" y="79.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (5 samples, 0.04%)</title><rect x="466.6" y="1941" width="0.4" height="15.0" fill="rgb(210,33,43)" rx="2" ry="2" />
<text  x="469.58" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.1" y="1397" width="0.2" height="15.0" fill="rgb(254,202,43)" rx="2" ry="2" />
<text  x="462.09" y="1407.5" ></text>
</g>
<g >
<title>kmp_flag_64::wait (184 samples, 1.33%)</title><rect x="998.9" y="2053" width="15.7" height="15.0" fill="rgb(225,44,28)" rx="2" ry="2" />
<text  x="1001.91" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="459.1" y="1349" width="0.2" height="15.0" fill="rgb(231,14,44)" rx="2" ry="2" />
<text  x="462.09" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="853" width="0.5" height="15.0" fill="rgb(236,225,36)" rx="2" ry="2" />
<text  x="1185.34" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="933" width="0.2" height="15.0" fill="rgb(230,97,36)" rx="2" ry="2" />
<text  x="461.49" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1701" width="0.5" height="15.0" fill="rgb(213,112,53)" rx="2" ry="2" />
<text  x="1185.34" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1013" width="6.8" height="15.0" fill="rgb(250,120,2)" rx="2" ry="2" />
<text  x="67.90" y="1023.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (4 samples, 0.03%)</title><rect x="51.1" y="2037" width="0.4" height="15.0" fill="rgb(251,153,17)" rx="2" ry="2" />
<text  x="54.11" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="469" width="0.5" height="15.0" fill="rgb(236,52,6)" rx="2" ry="2" />
<text  x="1185.34" y="479.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (3 samples, 0.02%)</title><rect x="208.5" y="1957" width="0.3" height="15.0" fill="rgb(208,184,51)" rx="2" ry="2" />
<text  x="211.50" y="1967.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::squeeze_dim (2 samples, 0.01%)</title><rect x="745.2" y="2037" width="0.1" height="15.0" fill="rgb(207,219,10)" rx="2" ry="2" />
<text  x="748.17" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_float (8 samples, 0.06%)</title><rect x="447.9" y="1909" width="0.7" height="15.0" fill="rgb(230,226,16)" rx="2" ry="2" />
<text  x="450.94" y="1919.5" ></text>
</g>
<g >
<title>c10::KernelFunction::callBoxed (3 samples, 0.02%)</title><rect x="758.7" y="2037" width="0.3" height="15.0" fill="rgb(245,167,39)" rx="2" ry="2" />
<text  x="761.70" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1845" width="6.9" height="15.0" fill="rgb(247,222,16)" rx="2" ry="2" />
<text  x="67.90" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.06%)</title><rect x="1181.5" y="1829" width="0.7" height="15.0" fill="rgb(252,56,47)" rx="2" ry="2" />
<text  x="1184.49" y="1839.5" ></text>
</g>
<g >
<title>torch::jit::(anonymous namespace)::{lambda (2 samples, 0.01%)</title><rect x="1153.1" y="1941" width="0.2" height="15.0" fill="rgb(205,198,33)" rx="2" ry="2" />
<text  x="1156.14" y="1951.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;TNewsCluster*, std::vector&lt;TNewsCluster, std::allocator&lt;TNewsCluster&gt; &gt; &gt;, TNewsCluster*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (3 samples, 0.02%)</title><rect x="445.0" y="1989" width="0.2" height="15.0" fill="rgb(225,7,24)" rx="2" ry="2" />
<text  x="447.96" y="1999.5" ></text>
</g>
<g >
<title>fasttext::Vector::mul (8 samples, 0.06%)</title><rect x="620.9" y="1941" width="0.7" height="15.0" fill="rgb(234,25,43)" rx="2" ry="2" />
<text  x="623.90" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="638.5" y="2021" width="0.3" height="15.0" fill="rgb(207,148,15)" rx="2" ry="2" />
<text  x="641.52" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1317" width="0.5" height="15.0" fill="rgb(229,191,33)" rx="2" ry="2" />
<text  x="1185.34" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1493" width="0.5" height="15.0" fill="rgb(249,56,27)" rx="2" ry="2" />
<text  x="1184.66" y="1503.5" ></text>
</g>
<g >
<title>[unknown] (8,170 samples, 58.93%)</title><rect x="51.9" y="2053" width="695.4" height="15.0" fill="rgb(236,189,20)" rx="2" ry="2" />
<text  x="54.88" y="2063.5" >[unknown]</text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="78.6" y="2021" width="0.2" height="15.0" fill="rgb(248,11,12)" rx="2" ry="2" />
<text  x="81.61" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (18 samples, 0.13%)</title><rect x="457.7" y="1829" width="1.6" height="15.0" fill="rgb(245,31,51)" rx="2" ry="2" />
<text  x="460.72" y="1839.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (2 samples, 0.01%)</title><rect x="690.0" y="2005" width="0.2" height="15.0" fill="rgb(244,172,23)" rx="2" ry="2" />
<text  x="693.01" y="2015.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (5 samples, 0.04%)</title><rect x="1185.7" y="2053" width="0.5" height="15.0" fill="rgb(218,146,43)" rx="2" ry="2" />
<text  x="1188.74" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1269" width="0.5" height="15.0" fill="rgb(218,227,14)" rx="2" ry="2" />
<text  x="1184.66" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="917" width="0.5" height="15.0" fill="rgb(226,221,20)" rx="2" ry="2" />
<text  x="1185.34" y="927.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="389" width="6.8" height="15.0" fill="rgb(235,78,44)" rx="2" ry="2" />
<text  x="67.90" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="459.1" y="1253" width="0.2" height="15.0" fill="rgb(245,224,36)" rx="2" ry="2" />
<text  x="462.09" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="661" width="0.5" height="15.0" fill="rgb(223,116,15)" rx="2" ry="2" />
<text  x="1184.66" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="459.1" y="1221" width="0.2" height="15.0" fill="rgb(218,196,43)" rx="2" ry="2" />
<text  x="462.09" y="1231.5" ></text>
</g>
<g >
<title>c10::GetCPUAllocator (2 samples, 0.01%)</title><rect x="479.9" y="1893" width="0.1" height="15.0" fill="rgb(208,39,48)" rx="2" ry="2" />
<text  x="482.86" y="1903.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::~Tokenizer (2 samples, 0.01%)</title><rect x="690.0" y="2037" width="0.2" height="15.0" fill="rgb(218,112,41)" rx="2" ry="2" />
<text  x="693.01" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="741" width="0.5" height="15.0" fill="rgb(251,97,8)" rx="2" ry="2" />
<text  x="1184.66" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="209.7" y="1877" width="0.3" height="15.0" fill="rgb(244,76,38)" rx="2" ry="2" />
<text  x="212.69" y="1887.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (450 samples, 3.25%)</title><rect x="10.3" y="2053" width="38.3" height="15.0" fill="rgb(227,215,52)" rx="2" ry="2" />
<text  x="13.26" y="2063.5" >[li..</text>
</g>
<g >
<title>std::__move_merge&lt;__gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, TDbDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (5 samples, 0.04%)</title><rect x="444.5" y="1957" width="0.5" height="15.0" fill="rgb(225,218,51)" rx="2" ry="2" />
<text  x="447.53" y="1967.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (2 samples, 0.01%)</title><rect x="458.0" y="1733" width="0.1" height="15.0" fill="rgb(210,52,2)" rx="2" ry="2" />
<text  x="460.98" y="1743.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (48 samples, 0.35%)</title><rect x="96.6" y="2021" width="4.1" height="15.0" fill="rgb(239,89,36)" rx="2" ry="2" />
<text  x="99.57" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="437" width="6.8" height="15.0" fill="rgb(230,176,17)" rx="2" ry="2" />
<text  x="67.90" y="447.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (6 samples, 0.04%)</title><rect x="80.8" y="2005" width="0.5" height="15.0" fill="rgb(251,222,20)" rx="2" ry="2" />
<text  x="83.82" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (23 samples, 0.17%)</title><rect x="446.7" y="1925" width="1.9" height="15.0" fill="rgb(242,151,31)" rx="2" ry="2" />
<text  x="449.66" y="1935.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (10 samples, 0.07%)</title><rect x="62.3" y="1957" width="0.8" height="15.0" fill="rgb(210,145,26)" rx="2" ry="2" />
<text  x="65.26" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="459.0" y="1461" width="0.3" height="15.0" fill="rgb(249,114,24)" rx="2" ry="2" />
<text  x="462.00" y="1471.5" ></text>
</g>
<g >
<title>TDbDocument::operator= (9 samples, 0.06%)</title><rect x="443.8" y="1941" width="0.7" height="15.0" fill="rgb(214,213,0)" rx="2" ry="2" />
<text  x="446.76" y="1951.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.01%)</title><rect x="85.1" y="2021" width="0.1" height="15.0" fill="rgb(244,210,37)" rx="2" ry="2" />
<text  x="88.07" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (30 samples, 0.22%)</title><rect x="446.6" y="1941" width="2.5" height="15.0" fill="rgb(248,94,33)" rx="2" ry="2" />
<text  x="449.57" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="565" width="0.5" height="15.0" fill="rgb(240,104,39)" rx="2" ry="2" />
<text  x="1185.34" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1181.1" y="2021" width="0.3" height="15.0" fill="rgb(250,203,15)" rx="2" ry="2" />
<text  x="1184.15" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="309" width="6.8" height="15.0" fill="rgb(209,174,53)" rx="2" ry="2" />
<text  x="67.90" y="319.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (6 samples, 0.04%)</title><rect x="83.4" y="2021" width="0.5" height="15.0" fill="rgb(211,195,14)" rx="2" ry="2" />
<text  x="86.37" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="597" width="0.2" height="15.0" fill="rgb(206,101,1)" rx="2" ry="2" />
<text  x="461.49" y="607.5" ></text>
</g>
<g >
<title>onmt::get_alphabet_id (7 samples, 0.05%)</title><rect x="1063.7" y="2053" width="0.6" height="15.0" fill="rgb(240,155,52)" rx="2" ry="2" />
<text  x="1066.68" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1093" width="0.5" height="15.0" fill="rgb(211,142,53)" rx="2" ry="2" />
<text  x="1185.34" y="1103.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::operator[] (4 samples, 0.03%)</title><rect x="451.6" y="1989" width="0.3" height="15.0" fill="rgb(206,218,24)" rx="2" ry="2" />
<text  x="454.60" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="209.8" y="1829" width="0.2" height="15.0" fill="rgb(225,5,23)" rx="2" ry="2" />
<text  x="212.77" y="1839.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="645.6" y="1973" width="0.2" height="15.0" fill="rgb(207,202,45)" rx="2" ry="2" />
<text  x="648.58" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="885" width="6.8" height="15.0" fill="rgb(248,4,44)" rx="2" ry="2" />
<text  x="67.90" y="895.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::_th_addmm_out (2 samples, 0.01%)</title><rect x="69.1" y="53" width="0.1" height="15.0" fill="rgb(242,29,54)" rx="2" ry="2" />
<text  x="72.07" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1181.6" y="1573" width="0.6" height="15.0" fill="rgb(232,131,24)" rx="2" ry="2" />
<text  x="1184.57" y="1583.5" ></text>
</g>
<g >
<title>c10::TensorType::isSubtypeOfExt (5 samples, 0.04%)</title><rect x="645.1" y="2037" width="0.4" height="15.0" fill="rgb(205,134,35)" rx="2" ry="2" />
<text  x="648.07" y="2047.5" ></text>
</g>
<g >
<title>c10::Device::validate (2 samples, 0.01%)</title><rect x="476.4" y="1861" width="0.1" height="15.0" fill="rgb(233,215,4)" rx="2" ry="2" />
<text  x="479.37" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1333" width="0.5" height="15.0" fill="rgb(237,95,24)" rx="2" ry="2" />
<text  x="1185.34" y="1343.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="645" width="6.8" height="15.0" fill="rgb(225,122,22)" rx="2" ry="2" />
<text  x="67.90" y="655.5" ></text>
</g>
<g >
<title>free@plt (2 samples, 0.01%)</title><rect x="84.9" y="2021" width="0.2" height="15.0" fill="rgb(223,215,44)" rx="2" ry="2" />
<text  x="87.90" y="2031.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (2 samples, 0.01%)</title><rect x="639.5" y="1989" width="0.1" height="15.0" fill="rgb(237,78,45)" rx="2" ry="2" />
<text  x="642.45" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="458.3" y="1381" width="0.4" height="15.0" fill="rgb(253,207,3)" rx="2" ry="2" />
<text  x="461.32" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="458.1" y="1701" width="0.6" height="15.0" fill="rgb(209,68,19)" rx="2" ry="2" />
<text  x="461.15" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="853" width="6.8" height="15.0" fill="rgb(232,178,7)" rx="2" ry="2" />
<text  x="67.90" y="863.5" ></text>
</g>
<g >
<title>at::Tensor::Tensor (2 samples, 0.01%)</title><rect x="79.7" y="1989" width="0.2" height="15.0" fill="rgb(205,182,45)" rx="2" ry="2" />
<text  x="82.71" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="458.4" y="1317" width="0.3" height="15.0" fill="rgb(250,159,35)" rx="2" ry="2" />
<text  x="461.41" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="229" width="0.5" height="15.0" fill="rgb(250,214,26)" rx="2" ry="2" />
<text  x="1184.66" y="239.5" ></text>
</g>
<g >
<title>tg::from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (4 samples, 0.03%)</title><rect x="456.2" y="1941" width="0.3" height="15.0" fill="rgb(244,16,21)" rx="2" ry="2" />
<text  x="459.19" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="458.9" y="1605" width="0.4" height="15.0" fill="rgb(233,228,36)" rx="2" ry="2" />
<text  x="461.92" y="1615.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (23 samples, 0.17%)</title><rect x="125.6" y="2021" width="1.9" height="15.0" fill="rgb(241,111,8)" rx="2" ry="2" />
<text  x="128.59" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_float (4 samples, 0.03%)</title><rect x="448.8" y="1925" width="0.3" height="15.0" fill="rgb(250,80,11)" rx="2" ry="2" />
<text  x="451.79" y="1935.5" ></text>
</g>
<g >
<title>at::native::zero_ (2 samples, 0.01%)</title><rect x="65.6" y="37" width="0.2" height="15.0" fill="rgb(245,18,11)" rx="2" ry="2" />
<text  x="68.58" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="458.4" y="1333" width="0.3" height="15.0" fill="rgb(225,74,52)" rx="2" ry="2" />
<text  x="461.41" y="1343.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="821" width="6.8" height="15.0" fill="rgb(216,22,21)" rx="2" ry="2" />
<text  x="67.90" y="831.5" ></text>
</g>
<g >
<title>tableCache (2 samples, 0.01%)</title><rect x="744.4" y="2037" width="0.2" height="15.0" fill="rgb(213,15,1)" rx="2" ry="2" />
<text  x="747.40" y="2047.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="452.1" y="1941" width="0.2" height="15.0" fill="rgb(250,113,22)" rx="2" ry="2" />
<text  x="455.11" y="1951.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (4 samples, 0.03%)</title><rect x="1186.6" y="2053" width="0.3" height="15.0" fill="rgb(206,55,45)" rx="2" ry="2" />
<text  x="1189.60" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (2 samples, 0.01%)</title><rect x="452.9" y="1877" width="0.1" height="15.0" fill="rgb(229,113,29)" rx="2" ry="2" />
<text  x="455.87" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="357" width="0.2" height="15.0" fill="rgb(226,166,52)" rx="2" ry="2" />
<text  x="461.49" y="367.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1317" width="6.8" height="15.0" fill="rgb(230,217,52)" rx="2" ry="2" />
<text  x="67.90" y="1327.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1557" width="6.9" height="15.0" fill="rgb(244,149,16)" rx="2" ry="2" />
<text  x="67.90" y="1567.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (254 samples, 1.83%)</title><rect x="653.0" y="2037" width="21.6" height="15.0" fill="rgb(226,169,9)" rx="2" ry="2" />
<text  x="655.99" y="2047.5" >f..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1182.3" y="1797" width="0.5" height="15.0" fill="rgb(211,163,22)" rx="2" ry="2" />
<text  x="1185.25" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="1269" width="0.2" height="15.0" fill="rgb(218,172,19)" rx="2" ry="2" />
<text  x="461.49" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1181.4" y="1925" width="0.8" height="15.0" fill="rgb(211,146,29)" rx="2" ry="2" />
<text  x="1184.40" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1181.4" y="1861" width="0.8" height="15.0" fill="rgb(248,104,51)" rx="2" ry="2" />
<text  x="1184.40" y="1871.5" ></text>
</g>
<g >
<title>free@plt (2 samples, 0.01%)</title><rect x="674.6" y="2037" width="0.2" height="15.0" fill="rgb(246,219,5)" rx="2" ry="2" />
<text  x="677.61" y="2047.5" ></text>
</g>
<g >
<title>c10::IValue::toTensor (2 samples, 0.01%)</title><rect x="1148.8" y="1941" width="0.2" height="15.0" fill="rgb(225,142,34)" rx="2" ry="2" />
<text  x="1151.80" y="1951.5" ></text>
</g>
<g >
<title>c10::StorageImpl::~StorageImpl (3 samples, 0.02%)</title><rect x="638.5" y="2037" width="0.3" height="15.0" fill="rgb(219,77,14)" rx="2" ry="2" />
<text  x="641.52" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="458.1" y="1733" width="0.6" height="15.0" fill="rgb(233,123,21)" rx="2" ry="2" />
<text  x="461.15" y="1743.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (24 samples, 0.17%)</title><rect x="59.1" y="2021" width="2.1" height="15.0" fill="rgb(247,192,42)" rx="2" ry="2" />
<text  x="62.11" y="2031.5" ></text>
</g>
<g >
<title>TDbDocument::TDbDocument (2 samples, 0.01%)</title><rect x="210.3" y="1957" width="0.2" height="15.0" fill="rgb(211,23,52)" rx="2" ry="2" />
<text  x="213.28" y="1967.5" ></text>
</g>
<g >
<title>at::native::zero_ (2 samples, 0.01%)</title><rect x="744.4" y="2021" width="0.2" height="15.0" fill="rgb(210,133,17)" rx="2" ry="2" />
<text  x="747.40" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1477" width="6.9" height="15.0" fill="rgb(211,9,28)" rx="2" ry="2" />
<text  x="67.90" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1109" width="0.5" height="15.0" fill="rgb(221,179,2)" rx="2" ry="2" />
<text  x="1184.66" y="1119.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (3 samples, 0.02%)</title><rect x="642.3" y="2005" width="0.3" height="15.0" fill="rgb(226,123,51)" rx="2" ry="2" />
<text  x="645.35" y="2015.5" ></text>
</g>
<g >
<title>at::native::as_strided_tensorimpl (5 samples, 0.04%)</title><rect x="639.9" y="1989" width="0.4" height="15.0" fill="rgb(212,174,25)" rx="2" ry="2" />
<text  x="642.88" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::rfind (2 samples, 0.01%)</title><rect x="638.3" y="2005" width="0.2" height="15.0" fill="rgb(229,199,14)" rx="2" ry="2" />
<text  x="641.35" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1093" width="0.5" height="15.0" fill="rgb(221,163,45)" rx="2" ry="2" />
<text  x="1184.66" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="869" width="0.5" height="15.0" fill="rgb(246,30,8)" rx="2" ry="2" />
<text  x="1185.34" y="879.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (12 samples, 0.09%)</title><rect x="1163.4" y="2053" width="1.0" height="15.0" fill="rgb(253,57,11)" rx="2" ry="2" />
<text  x="1166.36" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1181.7" y="117" width="0.5" height="15.0" fill="rgb(246,116,40)" rx="2" ry="2" />
<text  x="1184.74" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1181.6" y="1621" width="0.6" height="15.0" fill="rgb(238,36,37)" rx="2" ry="2" />
<text  x="1184.57" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1301" width="0.5" height="15.0" fill="rgb(250,154,31)" rx="2" ry="2" />
<text  x="1185.34" y="1311.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, TDbDocument*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (19 samples, 0.14%)</title><rect x="443.3" y="1989" width="1.7" height="15.0" fill="rgb(222,181,53)" rx="2" ry="2" />
<text  x="446.34" y="1999.5" ></text>
</g>
<g >
<title>TNewsCluster::operator= (3 samples, 0.02%)</title><rect x="445.0" y="1957" width="0.2" height="15.0" fill="rgb(219,61,50)" rx="2" ry="2" />
<text  x="447.96" y="1967.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (17 samples, 0.12%)</title><rect x="741.6" y="2005" width="1.4" height="15.0" fill="rgb(253,112,15)" rx="2" ry="2" />
<text  x="744.59" y="2015.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (42 samples, 0.30%)</title><rect x="683.1" y="2037" width="3.6" height="15.0" fill="rgb(235,139,2)" rx="2" ry="2" />
<text  x="686.12" y="2047.5" ></text>
</g>
<g >
<title>memcmp@plt (2 samples, 0.01%)</title><rect x="200.8" y="1941" width="0.2" height="15.0" fill="rgb(225,211,49)" rx="2" ry="2" />
<text  x="203.84" y="1951.5" ></text>
</g>
<g >
<title>c10::Dispatcher::singleton (2 samples, 0.01%)</title><rect x="477.1" y="1909" width="0.2" height="15.0" fill="rgb(219,162,43)" rx="2" ry="2" />
<text  x="480.13" y="1919.5" ></text>
</g>
<g >
<title>c10::KernelFunction::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor const&amp;, bool&gt; (9 samples, 0.06%)</title><rect x="473.6" y="1925" width="0.8" height="15.0" fill="rgb(254,66,37)" rx="2" ry="2" />
<text  x="476.64" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="209.8" y="1413" width="0.1" height="15.0" fill="rgb(232,155,19)" rx="2" ry="2" />
<text  x="212.77" y="1423.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1749" width="6.9" height="15.0" fill="rgb(251,210,8)" rx="2" ry="2" />
<text  x="67.90" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="629" width="0.5" height="15.0" fill="rgb(241,123,43)" rx="2" ry="2" />
<text  x="1184.66" y="639.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (2 samples, 0.01%)</title><rect x="743.1" y="2037" width="0.2" height="15.0" fill="rgb(209,5,12)" rx="2" ry="2" />
<text  x="746.13" y="2047.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (11 samples, 0.08%)</title><rect x="83.9" y="2021" width="0.9" height="15.0" fill="rgb(221,209,29)" rx="2" ry="2" />
<text  x="86.88" y="2031.5" ></text>
</g>
<g >
<title>c10::TensorImpl::~TensorImpl (3 samples, 0.02%)</title><rect x="646.2" y="2005" width="0.2" height="15.0" fill="rgb(216,132,49)" rx="2" ry="2" />
<text  x="649.18" y="2015.5" ></text>
</g>
<g >
<title>std::locale::locale (3 samples, 0.02%)</title><rect x="632.9" y="1941" width="0.3" height="15.0" fill="rgb(209,60,52)" rx="2" ry="2" />
<text  x="635.90" y="1951.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.01%)</title><rect x="466.4" y="1909" width="0.2" height="15.0" fill="rgb(216,211,18)" rx="2" ry="2" />
<text  x="469.41" y="1919.5" ></text>
</g>
<g >
<title>c10::function_ref&lt;void  (2 samples, 0.01%)</title><rect x="759.3" y="2053" width="0.2" height="15.0" fill="rgb(209,164,28)" rx="2" ry="2" />
<text  x="762.30" y="2063.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.04%)</title><rect x="734.9" y="2037" width="0.5" height="15.0" fill="rgb(252,39,41)" rx="2" ry="2" />
<text  x="737.87" y="2047.5" ></text>
</g>
<g >
<title>torch::autograd::DifferentiableViewMeta::requires_grad (2 samples, 0.01%)</title><rect x="744.7" y="2037" width="0.2" height="15.0" fill="rgb(230,176,41)" rx="2" ry="2" />
<text  x="747.74" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="405" width="0.2" height="15.0" fill="rgb(216,108,26)" rx="2" ry="2" />
<text  x="461.49" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="458.1" y="1573" width="0.6" height="15.0" fill="rgb(221,194,44)" rx="2" ry="2" />
<text  x="461.15" y="1583.5" ></text>
</g>
<g >
<title>TNewsCluster::~TNewsCluster (3 samples, 0.02%)</title><rect x="446.0" y="2005" width="0.2" height="15.0" fill="rgb(238,136,42)" rx="2" ry="2" />
<text  x="448.98" y="2015.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_column_family.cc (4 samples, 0.03%)</title><rect x="747.3" y="2053" width="0.3" height="15.0" fill="rgb(210,37,32)" rx="2" ry="2" />
<text  x="750.30" y="2063.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::finalize_tokens (22 samples, 0.16%)</title><rect x="1026.0" y="2053" width="1.8" height="15.0" fill="rgb(233,116,20)" rx="2" ry="2" />
<text  x="1028.98" y="2063.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.06%)</title><rect x="1146.8" y="2053" width="0.7" height="15.0" fill="rgb(254,128,45)" rx="2" ry="2" />
<text  x="1149.76" y="2063.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (4 samples, 0.03%)</title><rect x="1184.1" y="2053" width="0.4" height="15.0" fill="rgb(208,49,26)" rx="2" ry="2" />
<text  x="1187.13" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1205" width="0.5" height="15.0" fill="rgb(206,185,13)" rx="2" ry="2" />
<text  x="1185.34" y="1215.5" ></text>
</g>
<g >
<title>c10::DispatchKeySet::has (2 samples, 0.01%)</title><rect x="70.2" y="37" width="0.1" height="15.0" fill="rgb(228,8,47)" rx="2" ry="2" />
<text  x="73.18" y="47.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (11 samples, 0.08%)</title><rect x="648.7" y="2037" width="1.0" height="15.0" fill="rgb(231,51,7)" rx="2" ry="2" />
<text  x="651.73" y="2047.5" ></text>
</g>
<g >
<title>c10::IValue::type (2 samples, 0.01%)</title><rect x="638.3" y="2037" width="0.2" height="15.0" fill="rgb(252,108,14)" rx="2" ry="2" />
<text  x="641.35" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="405" width="0.5" height="15.0" fill="rgb(250,34,8)" rx="2" ry="2" />
<text  x="1184.66" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="373" width="0.5" height="15.0" fill="rgb(242,52,20)" rx="2" ry="2" />
<text  x="1184.66" y="383.5" ></text>
</g>
<g >
<title>TSlinkClustering::Cluster (2,732 samples, 19.71%)</title><rect x="210.2" y="1989" width="232.5" height="15.0" fill="rgb(254,10,44)" rx="2" ry="2" />
<text  x="213.20" y="1999.5" >TSlinkClustering::Cluster</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="517" width="0.5" height="15.0" fill="rgb(225,78,37)" rx="2" ry="2" />
<text  x="1184.66" y="527.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="165" width="6.8" height="15.0" fill="rgb(238,170,15)" rx="2" ry="2" />
<text  x="67.90" y="175.5" ></text>
</g>
<g >
<title>std::istream::read (4 samples, 0.03%)</title><rect x="1185.4" y="2053" width="0.3" height="15.0" fill="rgb(215,139,47)" rx="2" ry="2" />
<text  x="1188.40" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (2 samples, 0.01%)</title><rect x="174.5" y="1973" width="0.2" height="15.0" fill="rgb(224,157,8)" rx="2" ry="2" />
<text  x="177.53" y="1983.5" ></text>
</g>
<g >
<title>THStorage_resize (2 samples, 0.01%)</title><rect x="68.7" y="37" width="0.2" height="15.0" fill="rgb(226,146,43)" rx="2" ry="2" />
<text  x="71.73" y="47.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1717" width="6.9" height="15.0" fill="rgb(237,12,34)" rx="2" ry="2" />
<text  x="67.90" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="389" width="0.5" height="15.0" fill="rgb(207,162,37)" rx="2" ry="2" />
<text  x="1184.66" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="901" width="0.5" height="15.0" fill="rgb(235,213,47)" rx="2" ry="2" />
<text  x="1185.34" y="911.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (98 samples, 0.71%)</title><rect x="85.4" y="2021" width="8.4" height="15.0" fill="rgb(225,67,11)" rx="2" ry="2" />
<text  x="88.42" y="2031.5" ></text>
</g>
<g >
<title>at::native::DispatchStub&lt;void  (4 samples, 0.03%)</title><rect x="1152.2" y="1877" width="0.3" height="15.0" fill="rgb(229,189,24)" rx="2" ry="2" />
<text  x="1155.21" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="725" width="0.5" height="15.0" fill="rgb(219,133,10)" rx="2" ry="2" />
<text  x="1184.66" y="735.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="743.1" y="2021" width="0.2" height="15.0" fill="rgb(207,35,31)" rx="2" ry="2" />
<text  x="746.13" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (15 samples, 0.11%)</title><rect x="186.9" y="1909" width="1.3" height="15.0" fill="rgb(252,164,13)" rx="2" ry="2" />
<text  x="189.88" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="117" width="0.5" height="15.0" fill="rgb(211,10,33)" rx="2" ry="2" />
<text  x="1185.34" y="127.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (32 samples, 0.23%)</title><rect x="446.6" y="1989" width="2.7" height="15.0" fill="rgb(240,122,8)" rx="2" ry="2" />
<text  x="449.57" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="469" width="0.2" height="15.0" fill="rgb(215,74,54)" rx="2" ry="2" />
<text  x="461.49" y="479.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (3 samples, 0.02%)</title><rect x="207.6" y="1957" width="0.2" height="15.0" fill="rgb(249,115,5)" rx="2" ry="2" />
<text  x="210.56" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="747.1" y="2021" width="0.2" height="15.0" fill="rgb(253,113,39)" rx="2" ry="2" />
<text  x="750.13" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1333" width="6.8" height="15.0" fill="rgb(233,75,32)" rx="2" ry="2" />
<text  x="67.90" y="1343.5" ></text>
</g>
<g >
<title>at::Tensor::unsqueeze (3 samples, 0.02%)</title><rect x="470.8" y="1925" width="0.3" height="15.0" fill="rgb(220,212,27)" rx="2" ry="2" />
<text  x="473.83" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1285" width="6.8" height="15.0" fill="rgb(209,219,39)" rx="2" ry="2" />
<text  x="67.90" y="1295.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::operator[]&lt;char const&gt; (9 samples, 0.06%)</title><rect x="451.2" y="2005" width="0.7" height="15.0" fill="rgb(227,152,18)" rx="2" ry="2" />
<text  x="454.17" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (3 samples, 0.02%)</title><rect x="446.3" y="2005" width="0.3" height="15.0" fill="rgb(241,29,17)" rx="2" ry="2" />
<text  x="449.32" y="2015.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (2 samples, 0.01%)</title><rect x="452.1" y="1957" width="0.2" height="15.0" fill="rgb(209,36,12)" rx="2" ry="2" />
<text  x="455.11" y="1967.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.01%)</title><rect x="125.3" y="2021" width="0.1" height="15.0" fill="rgb(222,119,14)" rx="2" ry="2" />
<text  x="128.25" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="789" width="0.2" height="15.0" fill="rgb(224,150,45)" rx="2" ry="2" />
<text  x="461.49" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (45 samples, 0.32%)</title><rect x="462.7" y="1925" width="3.9" height="15.0" fill="rgb(249,178,16)" rx="2" ry="2" />
<text  x="465.75" y="1935.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="61.2" y="2005" width="0.1" height="15.0" fill="rgb(225,157,14)" rx="2" ry="2" />
<text  x="64.16" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="997" width="0.5" height="15.0" fill="rgb(247,201,30)" rx="2" ry="2" />
<text  x="1185.34" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="209.8" y="1813" width="0.2" height="15.0" fill="rgb(234,39,28)" rx="2" ry="2" />
<text  x="212.77" y="1823.5" ></text>
</g>
<g >
<title>THFloatTensor_setStorage (4 samples, 0.03%)</title><rect x="475.2" y="1781" width="0.3" height="15.0" fill="rgb(210,96,30)" rx="2" ry="2" />
<text  x="478.17" y="1791.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (18 samples, 0.13%)</title><rect x="198.4" y="1941" width="1.5" height="15.0" fill="rgb(253,177,19)" rx="2" ry="2" />
<text  x="201.37" y="1951.5" ></text>
</g>
<g >
<title>at::checked_dense_tensor_unwrap (4 samples, 0.03%)</title><rect x="70.2" y="53" width="0.3" height="15.0" fill="rgb(240,97,1)" rx="2" ry="2" />
<text  x="73.18" y="63.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (13 samples, 0.09%)</title><rect x="70.5" y="101" width="1.1" height="15.0" fill="rgb(252,174,45)" rx="2" ry="2" />
<text  x="73.52" y="111.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set (9 samples, 0.06%)</title><rect x="681.7" y="2037" width="0.7" height="15.0" fill="rgb(207,155,13)" rx="2" ry="2" />
<text  x="684.67" y="2047.5" ></text>
</g>
<g >
<title>at::detail::computeStorageSize (2 samples, 0.01%)</title><rect x="639.9" y="1973" width="0.1" height="15.0" fill="rgb(207,171,27)" rx="2" ry="2" />
<text  x="642.88" y="1983.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned_base::_M_futex_wait_until (2 samples, 0.01%)</title><rect x="1153.7" y="2053" width="0.2" height="15.0" fill="rgb(245,214,12)" rx="2" ry="2" />
<text  x="1156.74" y="2063.5" ></text>
</g>
<g >
<title>std::vector&lt;fasttext::entry, std::allocator&lt;fasttext::entry&gt; &gt;::_M_realloc_insert&lt;fasttext::entry const&amp;&gt; (5 samples, 0.04%)</title><rect x="128.4" y="2021" width="0.4" height="15.0" fill="rgb(229,141,2)" rx="2" ry="2" />
<text  x="131.40" y="2031.5" ></text>
</g>
<g >
<title>TNewsCluster::Summarize (11 samples, 0.08%)</title><rect x="209.3" y="1989" width="0.9" height="15.0" fill="rgb(212,7,32)" rx="2" ry="2" />
<text  x="212.26" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="453" width="0.5" height="15.0" fill="rgb(212,84,50)" rx="2" ry="2" />
<text  x="1185.34" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1237" width="0.5" height="15.0" fill="rgb(215,74,1)" rx="2" ry="2" />
<text  x="1185.34" y="1247.5" ></text>
</g>
<g >
<title>at::native::(anonymous namespace)::fill_kernel (2 samples, 0.01%)</title><rect x="70.0" y="37" width="0.2" height="15.0" fill="rgb(213,130,47)" rx="2" ry="2" />
<text  x="73.01" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1181.6" y="1733" width="0.6" height="15.0" fill="rgb(233,167,37)" rx="2" ry="2" />
<text  x="1184.57" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1182.3" y="1749" width="0.5" height="15.0" fill="rgb(239,155,21)" rx="2" ry="2" />
<text  x="1185.25" y="1759.5" ></text>
</g>
<g >
<title>c10::detail::make_boxed_from_unboxed_functor&lt;c10::detail::WrapKernelFunction_&lt;long  (2 samples, 0.01%)</title><rect x="647.0" y="2037" width="0.2" height="15.0" fill="rgb(245,94,21)" rx="2" ry="2" />
<text  x="650.03" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="277" width="6.8" height="15.0" fill="rgb(240,139,45)" rx="2" ry="2" />
<text  x="67.90" y="287.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1429" width="6.9" height="15.0" fill="rgb(221,55,48)" rx="2" ry="2" />
<text  x="67.90" y="1439.5" ></text>
</g>
<g >
<title>std::_Sp_counted_deleter&lt;torch::autograd::generated::AddBackward0*, void  (2 samples, 0.01%)</title><rect x="735.7" y="2037" width="0.2" height="15.0" fill="rgb(223,47,39)" rx="2" ry="2" />
<text  x="738.72" y="2047.5" ></text>
</g>
<g >
<title>caffe2::detail::_New&lt;float&gt; (25 samples, 0.18%)</title><rect x="759.6" y="2053" width="2.2" height="15.0" fill="rgb(253,46,32)" rx="2" ry="2" />
<text  x="762.64" y="2063.5" ></text>
</g>
<g >
<title>at::empty (2 samples, 0.01%)</title><rect x="78.9" y="1989" width="0.2" height="15.0" fill="rgb(237,181,0)" rx="2" ry="2" />
<text  x="81.95" y="1999.5" ></text>
</g>
<g >
<title>TAnnotator::PreprocessText (91 samples, 0.66%)</title><rect x="459.3" y="1957" width="7.8" height="15.0" fill="rgb(252,89,31)" rx="2" ry="2" />
<text  x="462.34" y="1967.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_construct_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.01%)</title><rect x="206.0" y="1909" width="0.2" height="15.0" fill="rgb(238,182,6)" rx="2" ry="2" />
<text  x="209.03" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1189" width="0.5" height="15.0" fill="rgb(208,148,37)" rx="2" ry="2" />
<text  x="1184.66" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1541" width="0.5" height="15.0" fill="rgb(212,137,9)" rx="2" ry="2" />
<text  x="1184.66" y="1551.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3 samples, 0.02%)</title><rect x="1147.3" y="2005" width="0.2" height="15.0" fill="rgb(249,175,51)" rx="2" ry="2" />
<text  x="1150.27" y="2015.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (15 samples, 0.11%)</title><rect x="1182.8" y="2053" width="1.2" height="15.0" fill="rgb(235,109,49)" rx="2" ry="2" />
<text  x="1185.76" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (205 samples, 1.48%)</title><rect x="61.2" y="2021" width="17.4" height="15.0" fill="rgb(250,226,51)" rx="2" ry="2" />
<text  x="64.16" y="2031.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set_case (3 samples, 0.02%)</title><rect x="682.4" y="2037" width="0.3" height="15.0" fill="rgb(224,33,37)" rx="2" ry="2" />
<text  x="685.44" y="2047.5" ></text>
</g>
<g >
<title>torch::jit::GraphExecutor::getDefaultNumBailOuts (2 samples, 0.01%)</title><rect x="1149.9" y="1989" width="0.2" height="15.0" fill="rgb(241,165,12)" rx="2" ry="2" />
<text  x="1152.91" y="1999.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (2 samples, 0.01%)</title><rect x="452.9" y="1957" width="0.1" height="15.0" fill="rgb(210,80,33)" rx="2" ry="2" />
<text  x="455.87" y="1967.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (28 samples, 0.20%)</title><rect x="1178.8" y="2053" width="2.3" height="15.0" fill="rgb(208,97,45)" rx="2" ry="2" />
<text  x="1181.76" y="2063.5" ></text>
</g>
<g >
<title>at::AutoNonVariableTypeMode::AutoNonVariableTypeMode (2 samples, 0.01%)</title><rect x="471.4" y="1893" width="0.2" height="15.0" fill="rgb(227,7,52)" rx="2" ry="2" />
<text  x="474.43" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1181.6" y="1797" width="0.6" height="15.0" fill="rgb(250,208,6)" rx="2" ry="2" />
<text  x="1184.57" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1182.3" y="1973" width="0.5" height="15.0" fill="rgb(221,80,23)" rx="2" ry="2" />
<text  x="1185.25" y="1983.5" ></text>
</g>
<g >
<title>torch::autograd::gatherFunctions (2 samples, 0.01%)</title><rect x="1189.8" y="2053" width="0.2" height="15.0" fill="rgb(218,219,34)" rx="2" ry="2" />
<text  x="1192.83" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="245" width="6.8" height="15.0" fill="rgb(222,135,7)" rx="2" ry="2" />
<text  x="67.90" y="255.5" ></text>
</g>
<g >
<title>at::Tensor::data_ptr&lt;float&gt; (3 samples, 0.02%)</title><rect x="470.2" y="1925" width="0.3" height="15.0" fill="rgb(248,185,32)" rx="2" ry="2" />
<text  x="473.24" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="677" width="0.5" height="15.0" fill="rgb(205,11,5)" rx="2" ry="2" />
<text  x="1185.34" y="687.5" ></text>
</g>
<g >
<title>c10::TensorImpl::compute_contiguous (2 samples, 0.01%)</title><rect x="475.3" y="1749" width="0.1" height="15.0" fill="rgb(206,70,39)" rx="2" ry="2" />
<text  x="478.26" y="1759.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (6 samples, 0.04%)</title><rect x="1152.1" y="1925" width="0.5" height="15.0" fill="rgb(226,86,12)" rx="2" ry="2" />
<text  x="1155.12" y="1935.5" ></text>
</g>
<g >
<title>c10::TensorImpl::copy_tensor_metadata (5 samples, 0.04%)</title><rect x="642.7" y="2005" width="0.4" height="15.0" fill="rgb(214,0,3)" rx="2" ry="2" />
<text  x="645.69" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="165" width="0.5" height="15.0" fill="rgb(250,50,3)" rx="2" ry="2" />
<text  x="1184.66" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="458.1" y="1685" width="0.6" height="15.0" fill="rgb(212,103,27)" rx="2" ry="2" />
<text  x="461.15" y="1695.5" ></text>
</g>
<g >
<title>at::TypeDefault::transpose_int (2 samples, 0.01%)</title><rect x="639.7" y="1989" width="0.2" height="15.0" fill="rgb(226,168,22)" rx="2" ry="2" />
<text  x="642.71" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="459.1" y="1317" width="0.2" height="15.0" fill="rgb(227,123,30)" rx="2" ry="2" />
<text  x="462.09" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="458.7" y="1749" width="0.6" height="15.0" fill="rgb(209,42,37)" rx="2" ry="2" />
<text  x="461.75" y="1759.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (6 samples, 0.04%)</title><rect x="206.5" y="1925" width="0.5" height="15.0" fill="rgb(253,167,33)" rx="2" ry="2" />
<text  x="209.45" y="1935.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="201.3" y="1909" width="0.1" height="15.0" fill="rgb(234,151,21)" rx="2" ry="2" />
<text  x="204.26" y="1919.5" ></text>
</g>
<g >
<title>TAgencyRating::ScoreUrl (8 samples, 0.06%)</title><rect x="209.4" y="1973" width="0.7" height="15.0" fill="rgb(229,7,47)" rx="2" ry="2" />
<text  x="212.43" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1182.2" y="2037" width="0.6" height="15.0" fill="rgb(241,29,28)" rx="2" ry="2" />
<text  x="1185.17" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="458.1" y="1541" width="0.6" height="15.0" fill="rgb(245,59,15)" rx="2" ry="2" />
<text  x="461.15" y="1551.5" ></text>
</g>
<g >
<title>onmt::unicode::get_case (55 samples, 0.40%)</title><rect x="1074.7" y="2053" width="4.7" height="15.0" fill="rgb(233,136,19)" rx="2" ry="2" />
<text  x="1077.75" y="2063.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::_th_set_ (5 samples, 0.04%)</title><rect x="475.7" y="1781" width="0.4" height="15.0" fill="rgb(243,97,30)" rx="2" ry="2" />
<text  x="478.68" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1181.6" y="1653" width="0.6" height="15.0" fill="rgb(252,12,39)" rx="2" ry="2" />
<text  x="1184.57" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1181.6" y="1685" width="0.6" height="15.0" fill="rgb(240,155,20)" rx="2" ry="2" />
<text  x="1184.57" y="1695.5" ></text>
</g>
<g >
<title>torch::jit::GraphFunction::run (62 samples, 0.45%)</title><rect x="1148.3" y="2037" width="5.3" height="15.0" fill="rgb(241,153,0)" rx="2" ry="2" />
<text  x="1151.29" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="69" width="0.5" height="15.0" fill="rgb(235,175,35)" rx="2" ry="2" />
<text  x="1185.34" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="901" width="0.2" height="15.0" fill="rgb(231,94,45)" rx="2" ry="2" />
<text  x="461.49" y="911.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (32 samples, 0.23%)</title><rect x="446.6" y="1973" width="2.7" height="15.0" fill="rgb(223,25,6)" rx="2" ry="2" />
<text  x="449.57" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1181.4" y="2021" width="0.8" height="15.0" fill="rgb(217,38,19)" rx="2" ry="2" />
<text  x="1184.40" y="2031.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="128.1" y="2021" width="0.2" height="15.0" fill="rgb(253,6,34)" rx="2" ry="2" />
<text  x="131.14" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="693" width="6.8" height="15.0" fill="rgb(224,88,54)" rx="2" ry="2" />
<text  x="67.90" y="703.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1413" width="6.9" height="15.0" fill="rgb(230,30,31)" rx="2" ry="2" />
<text  x="67.90" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="458.9" y="1653" width="0.4" height="15.0" fill="rgb(212,113,11)" rx="2" ry="2" />
<text  x="461.92" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="133" width="6.8" height="15.0" fill="rgb(220,26,46)" rx="2" ry="2" />
<text  x="67.90" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (2 samples, 0.01%)</title><rect x="740.7" y="2005" width="0.2" height="15.0" fill="rgb(217,189,29)" rx="2" ry="2" />
<text  x="743.74" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1093" width="6.8" height="15.0" fill="rgb(213,62,11)" rx="2" ry="2" />
<text  x="67.90" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1182.3" y="1877" width="0.5" height="15.0" fill="rgb(212,39,33)" rx="2" ry="2" />
<text  x="1185.25" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="949" width="0.2" height="15.0" fill="rgb(245,54,45)" rx="2" ry="2" />
<text  x="461.49" y="959.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::(anonymous namespace)::copy_ (5 samples, 0.04%)</title><rect x="473.9" y="1909" width="0.4" height="15.0" fill="rgb(218,47,11)" rx="2" ry="2" />
<text  x="476.90" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.1" y="1269" width="0.2" height="15.0" fill="rgb(238,123,6)" rx="2" ry="2" />
<text  x="462.09" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="458.3" y="1429" width="0.4" height="15.0" fill="rgb(246,144,22)" rx="2" ry="2" />
<text  x="461.32" y="1439.5" ></text>
</g>
<g >
<title>at::checked_dense_tensor_unwrap (2 samples, 0.01%)</title><rect x="475.8" y="1765" width="0.1" height="15.0" fill="rgb(209,159,3)" rx="2" ry="2" />
<text  x="478.77" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="458.9" y="1573" width="0.4" height="15.0" fill="rgb(221,18,33)" rx="2" ry="2" />
<text  x="461.92" y="1583.5" ></text>
</g>
<g >
<title>tgnews (13,863 samples, 100.00%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(213,129,48)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" >tgnews</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="821" width="0.2" height="15.0" fill="rgb(236,175,19)" rx="2" ry="2" />
<text  x="461.49" y="831.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="748.4" y="2053" width="0.3" height="15.0" fill="rgb(223,20,40)" rx="2" ry="2" />
<text  x="751.40" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="209.8" y="1541" width="0.1" height="15.0" fill="rgb(222,59,31)" rx="2" ry="2" />
<text  x="212.77" y="1551.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (95 samples, 0.69%)</title><rect x="690.3" y="2037" width="8.1" height="15.0" fill="rgb(226,35,48)" rx="2" ry="2" />
<text  x="693.27" y="2047.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::at (2 samples, 0.01%)</title><rect x="452.7" y="2005" width="0.2" height="15.0" fill="rgb(226,62,1)" rx="2" ry="2" />
<text  x="455.70" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="458.2" y="1493" width="0.5" height="15.0" fill="rgb(230,116,15)" rx="2" ry="2" />
<text  x="461.23" y="1503.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1141" width="6.8" height="15.0" fill="rgb(242,77,49)" rx="2" ry="2" />
<text  x="67.90" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1182.3" y="1957" width="0.5" height="15.0" fill="rgb(250,171,41)" rx="2" ry="2" />
<text  x="1185.25" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.04%)</title><rect x="50.6" y="2037" width="0.4" height="15.0" fill="rgb(227,165,42)" rx="2" ry="2" />
<text  x="53.60" y="2047.5" ></text>
</g>
<g >
<title>TAnnotator::AnnotateDocument (2,147 samples, 15.49%)</title><rect x="454.0" y="1973" width="182.7" height="15.0" fill="rgb(236,65,47)" rx="2" ry="2" />
<text  x="456.98" y="1983.5" >TAnnotator::AnnotateDoc..</text>
</g>
<g >
<title>fasttext::DenseMatrix::dotRow (9 samples, 0.06%)</title><rect x="772.2" y="2053" width="0.7" height="15.0" fill="rgb(243,22,28)" rx="2" ry="2" />
<text  x="775.15" y="2063.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (4 samples, 0.03%)</title><rect x="68.7" y="53" width="0.4" height="15.0" fill="rgb(252,109,47)" rx="2" ry="2" />
<text  x="71.73" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1181.6" y="1781" width="0.6" height="15.0" fill="rgb(254,216,18)" rx="2" ry="2" />
<text  x="1184.57" y="1791.5" ></text>
</g>
<g >
<title>caffe2::TypeMeta::_typeMetaDataInstance&lt;unsigned char&gt; (2 samples, 0.01%)</title><rect x="70.3" y="37" width="0.2" height="15.0" fill="rgb(209,169,15)" rx="2" ry="2" />
<text  x="73.35" y="47.5" ></text>
</g>
<g >
<title>cfree (2 samples, 0.01%)</title><rect x="1149.1" y="1941" width="0.2" height="15.0" fill="rgb(218,44,50)" rx="2" ry="2" />
<text  x="1152.14" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (6 samples, 0.04%)</title><rect x="209.5" y="1941" width="0.5" height="15.0" fill="rgb(243,181,16)" rx="2" ry="2" />
<text  x="212.52" y="1951.5" ></text>
</g>
<g >
<title>THTensor_resizeNd (2 samples, 0.01%)</title><rect x="475.3" y="1765" width="0.1" height="15.0" fill="rgb(222,2,43)" rx="2" ry="2" />
<text  x="478.26" y="1775.5" ></text>
</g>
<g >
<title>at::TensorIterator::compute_types (3 samples, 0.02%)</title><rect x="73.7" y="1973" width="0.2" height="15.0" fill="rgb(210,151,52)" rx="2" ry="2" />
<text  x="76.67" y="1983.5" ></text>
</g>
<g >
<title>fasttext::NegativeSamplingLoss::NegativeSamplingLoss (7 samples, 0.05%)</title><rect x="652.4" y="2037" width="0.6" height="15.0" fill="rgb(225,24,12)" rx="2" ry="2" />
<text  x="655.39" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1182.3" y="1909" width="0.5" height="15.0" fill="rgb(208,122,33)" rx="2" ry="2" />
<text  x="1185.25" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1181.4" y="1957" width="0.8" height="15.0" fill="rgb(253,192,30)" rx="2" ry="2" />
<text  x="1184.40" y="1967.5" ></text>
</g>
<g >
<title>c10::TensorType::TensorType (2 samples, 0.01%)</title><rect x="1149.0" y="1941" width="0.1" height="15.0" fill="rgb(225,67,43)" rx="2" ry="2" />
<text  x="1151.97" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1173" width="0.5" height="15.0" fill="rgb(252,215,28)" rx="2" ry="2" />
<text  x="1184.66" y="1183.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (6 samples, 0.04%)</title><rect x="70.5" y="53" width="0.5" height="15.0" fill="rgb(215,109,19)" rx="2" ry="2" />
<text  x="73.52" y="63.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="469" width="6.8" height="15.0" fill="rgb(254,76,35)" rx="2" ry="2" />
<text  x="67.90" y="479.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1125" width="6.8" height="15.0" fill="rgb(234,229,25)" rx="2" ry="2" />
<text  x="67.90" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="389" width="0.5" height="15.0" fill="rgb(237,49,4)" rx="2" ry="2" />
<text  x="1185.34" y="399.5" ></text>
</g>
<g >
<title>operator delete (11 samples, 0.08%)</title><rect x="124.2" y="2021" width="1.0" height="15.0" fill="rgb(211,127,9)" rx="2" ry="2" />
<text  x="127.23" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::add (41 samples, 0.30%)</title><rect x="178.3" y="1925" width="3.5" height="15.0" fill="rgb(216,207,24)" rx="2" ry="2" />
<text  x="181.28" y="1935.5" ></text>
</g>
<g >
<title>at::native::empty_cpu (2 samples, 0.01%)</title><rect x="479.6" y="1893" width="0.2" height="15.0" fill="rgb(249,68,47)" rx="2" ry="2" />
<text  x="482.60" y="1903.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (1,422 samples, 10.26%)</title><rect x="869.7" y="2053" width="121.0" height="15.0" fill="rgb(249,27,43)" rx="2" ry="2" />
<text  x="872.70" y="2063.5" >fasttext::Produ..</text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1237" width="6.8" height="15.0" fill="rgb(249,64,4)" rx="2" ry="2" />
<text  x="67.90" y="1247.5" ></text>
</g>
<g >
<title>at::impl::has_names (2 samples, 0.01%)</title><rect x="641.8" y="2005" width="0.2" height="15.0" fill="rgb(234,113,0)" rx="2" ry="2" />
<text  x="644.84" y="2015.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::slice_Tensor (4 samples, 0.03%)</title><rect x="473.2" y="1909" width="0.4" height="15.0" fill="rgb(246,95,37)" rx="2" ry="2" />
<text  x="476.22" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="805" width="0.2" height="15.0" fill="rgb(230,129,42)" rx="2" ry="2" />
<text  x="461.49" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1573" width="0.5" height="15.0" fill="rgb(212,52,36)" rx="2" ry="2" />
<text  x="1185.34" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1013" width="0.5" height="15.0" fill="rgb(214,167,23)" rx="2" ry="2" />
<text  x="1184.66" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="458.3" y="1365" width="0.4" height="15.0" fill="rgb(225,81,40)" rx="2" ry="2" />
<text  x="461.32" y="1375.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (22 samples, 0.16%)</title><rect x="48.7" y="2053" width="1.9" height="15.0" fill="rgb(209,54,35)" rx="2" ry="2" />
<text  x="51.73" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1685" width="0.5" height="15.0" fill="rgb(231,199,41)" rx="2" ry="2" />
<text  x="1185.34" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1173" width="6.8" height="15.0" fill="rgb(207,41,0)" rx="2" ry="2" />
<text  x="67.90" y="1183.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="633.8" y="1941" width="0.2" height="15.0" fill="rgb(233,64,11)" rx="2" ry="2" />
<text  x="636.83" y="1951.5" ></text>
</g>
<g >
<title>CleanFileName (2 samples, 0.01%)</title><rect x="173.4" y="2005" width="0.2" height="15.0" fill="rgb(250,93,42)" rx="2" ry="2" />
<text  x="176.43" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1189" width="6.8" height="15.0" fill="rgb(206,144,5)" rx="2" ry="2" />
<text  x="67.90" y="1199.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::dump (32 samples, 0.23%)</title><rect x="446.6" y="2005" width="2.7" height="15.0" fill="rgb(213,196,32)" rx="2" ry="2" />
<text  x="449.57" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="869" width="6.8" height="15.0" fill="rgb(244,86,53)" rx="2" ry="2" />
<text  x="67.90" y="879.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::load (12 samples, 0.09%)</title><rect x="66.1" y="37" width="1.0" height="15.0" fill="rgb(208,14,2)" rx="2" ry="2" />
<text  x="69.09" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1109" width="0.5" height="15.0" fill="rgb(211,7,45)" rx="2" ry="2" />
<text  x="1185.34" y="1119.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="636.3" y="1957" width="0.2" height="15.0" fill="rgb(232,199,24)" rx="2" ry="2" />
<text  x="639.30" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="181" width="0.5" height="15.0" fill="rgb(210,57,12)" rx="2" ry="2" />
<text  x="1184.66" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="458.8" y="1669" width="0.5" height="15.0" fill="rgb(246,94,26)" rx="2" ry="2" />
<text  x="461.83" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="325" width="6.8" height="15.0" fill="rgb(238,195,49)" rx="2" ry="2" />
<text  x="67.90" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt;::vector (4 samples, 0.03%)</title><rect x="445.6" y="1989" width="0.4" height="15.0" fill="rgb(246,53,18)" rx="2" ry="2" />
<text  x="448.64" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1541" width="0.5" height="15.0" fill="rgb(211,61,49)" rx="2" ry="2" />
<text  x="1185.34" y="1551.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (33 samples, 0.24%)</title><rect x="740.2" y="2037" width="2.8" height="15.0" fill="rgb(240,57,7)" rx="2" ry="2" />
<text  x="743.23" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="458.1" y="1605" width="0.6" height="15.0" fill="rgb(209,139,4)" rx="2" ry="2" />
<text  x="461.15" y="1615.5" ></text>
</g>
<g >
<title>at::native::(anonymous namespace)::add_kernel (2 samples, 0.01%)</title><rect x="1152.3" y="1845" width="0.2" height="15.0" fill="rgb(207,33,42)" rx="2" ry="2" />
<text  x="1155.29" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1182.3" y="1813" width="0.5" height="15.0" fill="rgb(221,92,48)" rx="2" ry="2" />
<text  x="1185.25" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="645" width="0.5" height="15.0" fill="rgb(233,214,17)" rx="2" ry="2" />
<text  x="1184.66" y="655.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (4 samples, 0.03%)</title><rect x="476.7" y="1893" width="0.3" height="15.0" fill="rgb(220,92,8)" rx="2" ry="2" />
<text  x="479.71" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="533" width="6.8" height="15.0" fill="rgb(206,213,24)" rx="2" ry="2" />
<text  x="67.90" y="543.5" ></text>
</g>
<g >
<title>boost::algorithm::join&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, char [2]&gt; (68 samples, 0.49%)</title><rect x="460.8" y="1941" width="5.8" height="15.0" fill="rgb(216,86,27)" rx="2" ry="2" />
<text  x="463.79" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="549" width="6.8" height="15.0" fill="rgb(217,21,5)" rx="2" ry="2" />
<text  x="67.90" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="901" width="0.5" height="15.0" fill="rgb(235,109,32)" rx="2" ry="2" />
<text  x="1184.66" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="517" width="0.5" height="15.0" fill="rgb(236,13,12)" rx="2" ry="2" />
<text  x="1185.34" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1157" width="0.5" height="15.0" fill="rgb(251,163,1)" rx="2" ry="2" />
<text  x="1184.66" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="638.3" y="2021" width="0.2" height="15.0" fill="rgb(206,77,21)" rx="2" ry="2" />
<text  x="641.35" y="2031.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;c10::Type,  (2 samples, 0.01%)</title><rect x="1149.7" y="1973" width="0.1" height="15.0" fill="rgb(234,142,44)" rx="2" ry="2" />
<text  x="1152.65" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="277" width="0.5" height="15.0" fill="rgb(223,62,47)" rx="2" ry="2" />
<text  x="1184.66" y="287.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::slice_Tensor (6 samples, 0.04%)</title><rect x="472.5" y="1893" width="0.5" height="15.0" fill="rgb(214,171,2)" rx="2" ry="2" />
<text  x="475.53" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="645" width="0.2" height="15.0" fill="rgb(240,188,47)" rx="2" ry="2" />
<text  x="461.49" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="581" width="0.5" height="15.0" fill="rgb(222,159,30)" rx="2" ry="2" />
<text  x="1184.66" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="693" width="0.5" height="15.0" fill="rgb(247,87,38)" rx="2" ry="2" />
<text  x="1185.34" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1413" width="0.5" height="15.0" fill="rgb(206,38,51)" rx="2" ry="2" />
<text  x="1184.66" y="1423.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (43 samples, 0.31%)</title><rect x="203.4" y="1941" width="3.6" height="15.0" fill="rgb(245,13,44)" rx="2" ry="2" />
<text  x="206.39" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="229" width="6.8" height="15.0" fill="rgb(247,101,34)" rx="2" ry="2" />
<text  x="67.90" y="239.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="690.0" y="2021" width="0.2" height="15.0" fill="rgb(246,224,23)" rx="2" ry="2" />
<text  x="693.01" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (18 samples, 0.13%)</title><rect x="457.7" y="1813" width="1.6" height="15.0" fill="rgb(252,123,54)" rx="2" ry="2" />
<text  x="460.72" y="1823.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::get_case (2 samples, 0.01%)</title><rect x="1025.0" y="2053" width="0.1" height="15.0" fill="rgb(239,122,52)" rx="2" ry="2" />
<text  x="1027.95" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1181.6" y="1605" width="0.6" height="15.0" fill="rgb(229,158,32)" rx="2" ry="2" />
<text  x="1184.57" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="741" width="0.2" height="15.0" fill="rgb(206,221,27)" rx="2" ry="2" />
<text  x="461.49" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1181.4" y="1877" width="0.8" height="15.0" fill="rgb(242,229,13)" rx="2" ry="2" />
<text  x="1184.40" y="1887.5" ></text>
</g>
<g >
<title>TClusterer::Cluster (3,005 samples, 21.68%)</title><rect x="189.4" y="2005" width="255.8" height="15.0" fill="rgb(217,45,51)" rx="2" ry="2" />
<text  x="192.43" y="2015.5" >TClusterer::Cluster</text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (2 samples, 0.01%)</title><rect x="448.6" y="1925" width="0.2" height="15.0" fill="rgb(228,84,24)" rx="2" ry="2" />
<text  x="451.62" y="1935.5" ></text>
</g>
<g >
<title>c10::IValue::toTensor (2 samples, 0.01%)</title><rect x="79.7" y="2005" width="0.2" height="15.0" fill="rgb(243,169,47)" rx="2" ry="2" />
<text  x="82.71" y="2015.5" ></text>
</g>
<g >
<title>torch::autograd::impl::grad_accumulator (3 samples, 0.02%)</title><rect x="128.8" y="2021" width="0.3" height="15.0" fill="rgb(222,195,41)" rx="2" ry="2" />
<text  x="131.83" y="2031.5" ></text>
</g>
<g >
<title>at::CPUType::set__source_Storage_storage_offset (11 samples, 0.08%)</title><rect x="475.2" y="1797" width="0.9" height="15.0" fill="rgb(218,171,45)" rx="2" ry="2" />
<text  x="478.17" y="1807.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (2 samples, 0.01%)</title><rect x="452.9" y="1845" width="0.1" height="15.0" fill="rgb(213,60,38)" rx="2" ry="2" />
<text  x="455.87" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="373" width="0.5" height="15.0" fill="rgb(210,180,11)" rx="2" ry="2" />
<text  x="1185.34" y="383.5" ></text>
</g>
<g >
<title>memcpy@plt (3 samples, 0.02%)</title><rect x="462.5" y="1925" width="0.2" height="15.0" fill="rgb(208,208,31)" rx="2" ry="2" />
<text  x="465.49" y="1935.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (13 samples, 0.09%)</title><rect x="475.1" y="1861" width="1.1" height="15.0" fill="rgb(215,104,54)" rx="2" ry="2" />
<text  x="478.09" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="405" width="0.5" height="15.0" fill="rgb(249,176,13)" rx="2" ry="2" />
<text  x="1185.34" y="415.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (2 samples, 0.01%)</title><rect x="650.1" y="2037" width="0.2" height="15.0" fill="rgb(234,18,5)" rx="2" ry="2" />
<text  x="653.09" y="2047.5" ></text>
</g>
<g >
<title>malloc (39 samples, 0.28%)</title><rect x="674.8" y="2037" width="3.3" height="15.0" fill="rgb(225,37,50)" rx="2" ry="2" />
<text  x="677.78" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1909" width="6.9" height="15.0" fill="rgb(223,176,4)" rx="2" ry="2" />
<text  x="67.90" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="677" width="0.5" height="15.0" fill="rgb(240,129,29)" rx="2" ry="2" />
<text  x="1184.66" y="687.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (20 samples, 0.14%)</title><rect x="616.9" y="1941" width="1.7" height="15.0" fill="rgb(239,50,30)" rx="2" ry="2" />
<text  x="619.90" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="458.3" y="1349" width="0.4" height="15.0" fill="rgb(238,54,0)" rx="2" ry="2" />
<text  x="461.32" y="1359.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.01%)</title><rect x="125.4" y="2021" width="0.2" height="15.0" fill="rgb(209,153,2)" rx="2" ry="2" />
<text  x="128.42" y="2031.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="634.3" y="1957" width="0.1" height="15.0" fill="rgb(245,35,7)" rx="2" ry="2" />
<text  x="637.26" y="1967.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::str[abi:cxx11] (4 samples, 0.03%)</title><rect x="682.8" y="2037" width="0.3" height="15.0" fill="rgb(238,59,38)" rx="2" ry="2" />
<text  x="685.78" y="2047.5" ></text>
</g>
<g >
<title>at::native::check_size_nonnegative (2 samples, 0.01%)</title><rect x="479.4" y="1893" width="0.2" height="15.0" fill="rgb(217,29,37)" rx="2" ry="2" />
<text  x="482.43" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="597" width="0.5" height="15.0" fill="rgb(222,81,2)" rx="2" ry="2" />
<text  x="1184.66" y="607.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="443.5" y="1957" width="0.2" height="15.0" fill="rgb(247,229,9)" rx="2" ry="2" />
<text  x="446.51" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="437" width="0.2" height="15.0" fill="rgb(229,135,32)" rx="2" ry="2" />
<text  x="461.49" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="209.8" y="1685" width="0.1" height="15.0" fill="rgb(205,55,53)" rx="2" ry="2" />
<text  x="212.77" y="1695.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="634.0" y="1941" width="0.3" height="15.0" fill="rgb(208,201,36)" rx="2" ry="2" />
<text  x="637.00" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="773" width="0.2" height="15.0" fill="rgb(221,178,35)" rx="2" ry="2" />
<text  x="461.49" y="783.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const*, std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;*&gt; (2 samples, 0.01%)</title><rect x="452.1" y="1893" width="0.2" height="15.0" fill="rgb(214,15,26)" rx="2" ry="2" />
<text  x="455.11" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="458.2" y="1477" width="0.5" height="15.0" fill="rgb(236,33,13)" rx="2" ry="2" />
<text  x="461.23" y="1487.5" ></text>
</g>
<g >
<title>at::(anonymous namespace)::empty_memory_format (2 samples, 0.01%)</title><rect x="759.6" y="2021" width="0.2" height="15.0" fill="rgb(209,187,27)" rx="2" ry="2" />
<text  x="762.64" y="2031.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::t (2 samples, 0.01%)</title><rect x="746.1" y="1989" width="0.2" height="15.0" fill="rgb(250,155,24)" rx="2" ry="2" />
<text  x="749.11" y="1999.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (4 samples, 0.03%)</title><rect x="76.8" y="2005" width="0.4" height="15.0" fill="rgb(232,224,24)" rx="2" ry="2" />
<text  x="79.82" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="533" width="0.5" height="15.0" fill="rgb(228,1,8)" rx="2" ry="2" />
<text  x="1184.66" y="543.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="453" width="6.8" height="15.0" fill="rgb(231,94,38)" rx="2" ry="2" />
<text  x="67.90" y="463.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1493" width="6.9" height="15.0" fill="rgb(239,109,20)" rx="2" ry="2" />
<text  x="67.90" y="1503.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="837" width="6.8" height="15.0" fill="rgb(235,106,5)" rx="2" ry="2" />
<text  x="67.90" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="209.8" y="1429" width="0.1" height="15.0" fill="rgb(248,94,41)" rx="2" ry="2" />
<text  x="212.77" y="1439.5" ></text>
</g>
<g >
<title>at::empty (2 samples, 0.01%)</title><rect x="761.3" y="2021" width="0.1" height="15.0" fill="rgb(253,102,22)" rx="2" ry="2" />
<text  x="764.26" y="2031.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (21 samples, 0.15%)</title><rect x="63.1" y="1941" width="1.8" height="15.0" fill="rgb(241,9,25)" rx="2" ry="2" />
<text  x="66.11" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1669" width="0.5" height="15.0" fill="rgb(221,123,11)" rx="2" ry="2" />
<text  x="1185.34" y="1679.5" ></text>
</g>
<g >
<title>TDbDocument::operator= (5 samples, 0.04%)</title><rect x="444.5" y="1941" width="0.5" height="15.0" fill="rgb(210,178,36)" rx="2" ry="2" />
<text  x="447.53" y="1951.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (8 samples, 0.06%)</title><rect x="77.5" y="2005" width="0.7" height="15.0" fill="rgb(214,211,9)" rx="2" ry="2" />
<text  x="80.50" y="2015.5" ></text>
</g>
<g >
<title>malloc (86 samples, 0.62%)</title><rect x="1014.6" y="2053" width="7.3" height="15.0" fill="rgb(225,124,17)" rx="2" ry="2" />
<text  x="1017.57" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="458.9" y="1621" width="0.4" height="15.0" fill="rgb(225,206,6)" rx="2" ry="2" />
<text  x="461.92" y="1631.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (2 samples, 0.01%)</title><rect x="635.0" y="1957" width="0.2" height="15.0" fill="rgb(238,97,34)" rx="2" ry="2" />
<text  x="638.03" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="965" width="0.5" height="15.0" fill="rgb(232,43,21)" rx="2" ry="2" />
<text  x="1185.34" y="975.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (14 samples, 0.10%)</title><rect x="193.0" y="1925" width="1.2" height="15.0" fill="rgb(234,13,31)" rx="2" ry="2" />
<text  x="196.01" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.06%)</title><rect x="479.3" y="1925" width="0.8" height="15.0" fill="rgb(251,150,47)" rx="2" ry="2" />
<text  x="482.34" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1573" width="6.9" height="15.0" fill="rgb(239,109,16)" rx="2" ry="2" />
<text  x="67.90" y="1583.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getId (135 samples, 0.97%)</title><rect x="783.9" y="2053" width="11.5" height="15.0" fill="rgb(238,25,40)" rx="2" ry="2" />
<text  x="786.90" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan (5 samples, 0.04%)</title><rect x="175.4" y="1941" width="0.4" height="15.0" fill="rgb(220,58,54)" rx="2" ry="2" />
<text  x="178.39" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="885" width="0.5" height="15.0" fill="rgb(240,47,23)" rx="2" ry="2" />
<text  x="1184.66" y="895.5" ></text>
</g>
<g >
<title>.omp_outlined. (518 samples, 3.74%)</title><rect x="129.2" y="2005" width="44.1" height="15.0" fill="rgb(220,218,28)" rx="2" ry="2" />
<text  x="132.17" y="2015.5" >.omp..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (20 samples, 0.14%)</title><rect x="457.6" y="1909" width="1.7" height="15.0" fill="rgb(217,176,23)" rx="2" ry="2" />
<text  x="460.55" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1877" width="6.9" height="15.0" fill="rgb(238,160,17)" rx="2" ry="2" />
<text  x="67.90" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="437" width="0.5" height="15.0" fill="rgb(245,74,37)" rx="2" ry="2" />
<text  x="1185.34" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1429" width="0.5" height="15.0" fill="rgb(209,228,54)" rx="2" ry="2" />
<text  x="1185.34" y="1439.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.01%)</title><rect x="81.2" y="1989" width="0.1" height="15.0" fill="rgb(228,177,52)" rx="2" ry="2" />
<text  x="84.16" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1181.4" y="1909" width="0.8" height="15.0" fill="rgb(243,175,5)" rx="2" ry="2" />
<text  x="1184.40" y="1919.5" ></text>
</g>
<g >
<title>at::namedinference::propagate_names_except (2 samples, 0.01%)</title><rect x="637.5" y="2021" width="0.2" height="15.0" fill="rgb(205,202,44)" rx="2" ry="2" />
<text  x="640.49" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="458.3" y="1461" width="0.4" height="15.0" fill="rgb(238,85,39)" rx="2" ry="2" />
<text  x="461.32" y="1471.5" ></text>
</g>
<g >
<title>rocksdb::TransactionBaseImpl::TryLock (63 samples, 0.45%)</title><rect x="1148.2" y="2053" width="5.4" height="15.0" fill="rgb(218,192,42)" rx="2" ry="2" />
<text  x="1151.21" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (62 samples, 0.45%)</title><rect x="64.9" y="101" width="5.3" height="15.0" fill="rgb(241,47,14)" rx="2" ry="2" />
<text  x="67.90" y="111.5" ></text>
</g>
<g >
<title>at::native::empty_cpu (2 samples, 0.01%)</title><rect x="639.5" y="1973" width="0.1" height="15.0" fill="rgb(217,26,4)" rx="2" ry="2" />
<text  x="642.45" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="997" width="0.2" height="15.0" fill="rgb(226,131,5)" rx="2" ry="2" />
<text  x="461.49" y="1007.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (6 samples, 0.04%)</title><rect x="478.8" y="1941" width="0.5" height="15.0" fill="rgb(223,14,7)" rx="2" ry="2" />
<text  x="481.83" y="1951.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::vector (2 samples, 0.01%)</title><rect x="452.9" y="1909" width="0.1" height="15.0" fill="rgb(225,210,1)" rx="2" ry="2" />
<text  x="455.87" y="1919.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (7 samples, 0.05%)</title><rect x="747.8" y="2053" width="0.6" height="15.0" fill="rgb(228,85,24)" rx="2" ry="2" />
<text  x="750.81" y="2063.5" ></text>
</g>
<g >
<title>fasttext::FastText::getDimension (2 samples, 0.01%)</title><rect x="616.7" y="1941" width="0.2" height="15.0" fill="rgb(241,21,8)" rx="2" ry="2" />
<text  x="619.73" y="1951.5" ></text>
</g>
<g >
<title>torch::from_blob (32 samples, 0.23%)</title><rect x="474.7" y="1925" width="2.8" height="15.0" fill="rgb(211,111,42)" rx="2" ry="2" />
<text  x="477.75" y="1935.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (13 samples, 0.09%)</title><rect x="635.2" y="1957" width="1.1" height="15.0" fill="rgb(245,86,28)" rx="2" ry="2" />
<text  x="638.20" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="209.6" y="1893" width="0.4" height="15.0" fill="rgb(215,82,10)" rx="2" ry="2" />
<text  x="212.60" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="209.8" y="1365" width="0.1" height="15.0" fill="rgb(248,34,22)" rx="2" ry="2" />
<text  x="212.77" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="209.8" y="1381" width="0.1" height="15.0" fill="rgb(238,63,28)" rx="2" ry="2" />
<text  x="212.77" y="1391.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="746.1" y="2005" width="0.2" height="15.0" fill="rgb(250,226,11)" rx="2" ry="2" />
<text  x="749.11" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1181.4" y="1941" width="0.8" height="15.0" fill="rgb(249,13,11)" rx="2" ry="2" />
<text  x="1184.40" y="1951.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="632.0" y="1941" width="0.2" height="15.0" fill="rgb(213,71,0)" rx="2" ry="2" />
<text  x="635.05" y="1951.5" ></text>
</g>
<g >
<title>onmt::unicode::is_separator (138 samples, 1.00%)</title><rect x="1134.9" y="2053" width="11.8" height="15.0" fill="rgb(219,70,18)" rx="2" ry="2" />
<text  x="1137.93" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1045" width="0.5" height="15.0" fill="rgb(240,197,37)" rx="2" ry="2" />
<text  x="1185.34" y="1055.5" ></text>
</g>
<g >
<title>__sched_yield (5 samples, 0.04%)</title><rect x="755.3" y="2053" width="0.4" height="15.0" fill="rgb(224,171,42)" rx="2" ry="2" />
<text  x="758.30" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1893" width="6.9" height="15.0" fill="rgb(207,225,18)" rx="2" ry="2" />
<text  x="67.90" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="209.8" y="1669" width="0.1" height="15.0" fill="rgb(235,13,8)" rx="2" ry="2" />
<text  x="212.77" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (17 samples, 0.12%)</title><rect x="457.8" y="1781" width="1.5" height="15.0" fill="rgb(226,85,31)" rx="2" ry="2" />
<text  x="460.81" y="1791.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (3 samples, 0.02%)</title><rect x="77.2" y="2005" width="0.3" height="15.0" fill="rgb(205,46,46)" rx="2" ry="2" />
<text  x="80.24" y="2015.5" ></text>
</g>
<g >
<title>mkl_serv_set_xerbla_interface (3 samples, 0.02%)</title><rect x="644.6" y="2005" width="0.2" height="15.0" fill="rgb(224,173,7)" rx="2" ry="2" />
<text  x="647.56" y="2015.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::ScoreUrl (5 samples, 0.04%)</title><rect x="207.8" y="1957" width="0.4" height="15.0" fill="rgb(208,70,34)" rx="2" ry="2" />
<text  x="210.82" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="458.9" y="1525" width="0.4" height="15.0" fill="rgb(227,109,17)" rx="2" ry="2" />
<text  x="461.92" y="1535.5" ></text>
</g>
<g >
<title>mkl_blas_avx512_xsgemv (34 samples, 0.25%)</title><rect x="678.6" y="2021" width="2.9" height="15.0" fill="rgb(227,220,19)" rx="2" ry="2" />
<text  x="681.61" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1381" width="0.5" height="15.0" fill="rgb(233,208,53)" rx="2" ry="2" />
<text  x="1185.34" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="209.8" y="1653" width="0.1" height="15.0" fill="rgb(244,175,22)" rx="2" ry="2" />
<text  x="212.77" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1029" width="0.5" height="15.0" fill="rgb(212,177,17)" rx="2" ry="2" />
<text  x="1184.66" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1182.3" y="1765" width="0.5" height="15.0" fill="rgb(253,52,47)" rx="2" ry="2" />
<text  x="1185.25" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="885" width="0.2" height="15.0" fill="rgb(205,130,37)" rx="2" ry="2" />
<text  x="461.49" y="895.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (3 samples, 0.02%)</title><rect x="69.2" y="69" width="0.3" height="15.0" fill="rgb(222,76,23)" rx="2" ry="2" />
<text  x="72.24" y="79.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="446.7" y="1909" width="0.3" height="15.0" fill="rgb(249,123,35)" rx="2" ry="2" />
<text  x="449.74" y="1919.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::t (2 samples, 0.01%)</title><rect x="745.3" y="2037" width="0.2" height="15.0" fill="rgb(248,95,36)" rx="2" ry="2" />
<text  x="748.34" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (7 samples, 0.05%)</title><rect x="450.4" y="1989" width="0.6" height="15.0" fill="rgb(205,229,28)" rx="2" ry="2" />
<text  x="453.40" y="1999.5" ></text>
</g>
<g >
<title>at::globalLegacyTypeDispatch (3 samples, 0.02%)</title><rect x="477.7" y="1909" width="0.3" height="15.0" fill="rgb(243,197,15)" rx="2" ry="2" />
<text  x="480.73" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="209.8" y="1493" width="0.1" height="15.0" fill="rgb(211,163,10)" rx="2" ry="2" />
<text  x="212.77" y="1503.5" ></text>
</g>
<g >
<title>THFloatBlas_gemm (2 samples, 0.01%)</title><rect x="639.0" y="2005" width="0.2" height="15.0" fill="rgb(218,50,23)" rx="2" ry="2" />
<text  x="642.03" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="209.8" y="1525" width="0.1" height="15.0" fill="rgb(217,51,34)" rx="2" ry="2" />
<text  x="212.77" y="1535.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::type_to_char (7 samples, 0.05%)</title><rect x="1025.3" y="2053" width="0.6" height="15.0" fill="rgb(217,46,20)" rx="2" ry="2" />
<text  x="1028.30" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="458.9" y="1493" width="0.4" height="15.0" fill="rgb(232,64,38)" rx="2" ry="2" />
<text  x="461.92" y="1503.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::addRowToVector (1,588 samples, 11.45%)</title><rect x="481.5" y="1941" width="135.1" height="15.0" fill="rgb(205,118,21)" rx="2" ry="2" />
<text  x="484.47" y="1951.5" >fasttext::DenseMa..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (3 samples, 0.02%)</title><rect x="452.0" y="1973" width="0.3" height="15.0" fill="rgb(247,214,1)" rx="2" ry="2" />
<text  x="455.02" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (7 samples, 0.05%)</title><rect x="1146.9" y="2037" width="0.6" height="15.0" fill="rgb(254,97,3)" rx="2" ry="2" />
<text  x="1149.93" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1669" width="6.9" height="15.0" fill="rgb(238,219,24)" rx="2" ry="2" />
<text  x="67.90" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="209.8" y="1717" width="0.1" height="15.0" fill="rgb(209,98,16)" rx="2" ry="2" />
<text  x="212.77" y="1727.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (3 samples, 0.02%)</title><rect x="175.6" y="1925" width="0.2" height="15.0" fill="rgb(213,182,5)" rx="2" ry="2" />
<text  x="178.56" y="1935.5" ></text>
</g>
<g >
<title>__kmp_yield (3 samples, 0.02%)</title><rect x="755.0" y="2053" width="0.2" height="15.0" fill="rgb(205,110,30)" rx="2" ry="2" />
<text  x="757.96" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="373" width="0.2" height="15.0" fill="rgb(228,183,53)" rx="2" ry="2" />
<text  x="461.49" y="383.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (8 samples, 0.06%)</title><rect x="479.3" y="1909" width="0.7" height="15.0" fill="rgb(250,59,16)" rx="2" ry="2" />
<text  x="482.34" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1181.6" y="1749" width="0.6" height="15.0" fill="rgb(207,107,12)" rx="2" ry="2" />
<text  x="1184.57" y="1759.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::sax_parse_internal&lt;nlohmann::detail::json_sax_dom_parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; (158 samples, 1.14%)</title><rect x="174.7" y="1957" width="13.5" height="15.0" fill="rgb(221,103,29)" rx="2" ry="2" />
<text  x="177.70" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="1141" width="0.2" height="15.0" fill="rgb(211,186,17)" rx="2" ry="2" />
<text  x="461.49" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="209.8" y="1637" width="0.1" height="15.0" fill="rgb(253,59,26)" rx="2" ry="2" />
<text  x="212.77" y="1647.5" ></text>
</g>
<g >
<title>memcmp@plt (12 samples, 0.09%)</title><rect x="1022.0" y="2053" width="1.0" height="15.0" fill="rgb(226,56,30)" rx="2" ry="2" />
<text  x="1024.98" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (71 samples, 0.51%)</title><rect x="639.0" y="2021" width="6.1" height="15.0" fill="rgb(213,211,24)" rx="2" ry="2" />
<text  x="642.03" y="2031.5" ></text>
</g>
<g >
<title>std::istream::get (6 samples, 0.04%)</title><rect x="1184.9" y="2053" width="0.5" height="15.0" fill="rgb(246,227,27)" rx="2" ry="2" />
<text  x="1187.89" y="2063.5" ></text>
</g>
<g >
<title>TAnnotator::~TAnnotator (6 samples, 0.04%)</title><rect x="188.9" y="2005" width="0.5" height="15.0" fill="rgb(208,63,15)" rx="2" ry="2" />
<text  x="191.92" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="458.1" y="1637" width="0.6" height="15.0" fill="rgb(231,189,13)" rx="2" ry="2" />
<text  x="461.15" y="1647.5" ></text>
</g>
<g >
<title>c10::UndefinedTensorImpl::~UndefinedTensorImpl (18 samples, 0.13%)</title><rect x="645.5" y="2037" width="1.5" height="15.0" fill="rgb(216,39,24)" rx="2" ry="2" />
<text  x="648.50" y="2047.5" ></text>
</g>
<g >
<title>torch::jit::GraphFunction::operator (60 samples, 0.43%)</title><rect x="1148.5" y="2005" width="5.1" height="15.0" fill="rgb(226,54,26)" rx="2" ry="2" />
<text  x="1151.46" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1189" width="0.5" height="15.0" fill="rgb(249,198,16)" rx="2" ry="2" />
<text  x="1185.34" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="837" width="0.2" height="15.0" fill="rgb(209,120,48)" rx="2" ry="2" />
<text  x="461.49" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1477" width="0.5" height="15.0" fill="rgb(241,144,6)" rx="2" ry="2" />
<text  x="1185.34" y="1487.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcImportance (11 samples, 0.08%)</title><rect x="207.8" y="1973" width="1.0" height="15.0" fill="rgb(232,159,19)" rx="2" ry="2" />
<text  x="210.82" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1182.3" y="1717" width="0.5" height="15.0" fill="rgb(232,171,28)" rx="2" ry="2" />
<text  x="1185.25" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="458.1" y="1653" width="0.6" height="15.0" fill="rgb(243,78,13)" rx="2" ry="2" />
<text  x="461.15" y="1663.5" ></text>
</g>
<g >
<title>torch::jit::InterpreterState::run (37 samples, 0.27%)</title><rect x="1150.2" y="1973" width="3.2" height="15.0" fill="rgb(244,195,43)" rx="2" ry="2" />
<text  x="1153.25" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="209.8" y="1557" width="0.1" height="15.0" fill="rgb(217,69,26)" rx="2" ry="2" />
<text  x="212.77" y="1567.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (420 samples, 3.03%)</title><rect x="827.4" y="2053" width="35.7" height="15.0" fill="rgb(206,33,32)" rx="2" ry="2" />
<text  x="830.39" y="2063.5" >fas..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="1029" width="0.2" height="15.0" fill="rgb(231,75,45)" rx="2" ry="2" />
<text  x="461.49" y="1039.5" ></text>
</g>
<g >
<title>__libc_start_main (3,287 samples, 23.71%)</title><rect x="173.3" y="2037" width="279.7" height="15.0" fill="rgb(224,159,3)" rx="2" ry="2" />
<text  x="176.26" y="2047.5" >__libc_start_main</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="459.1" y="1285" width="0.2" height="15.0" fill="rgb(205,100,30)" rx="2" ry="2" />
<text  x="462.09" y="1295.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1621" width="6.9" height="15.0" fill="rgb(223,187,18)" rx="2" ry="2" />
<text  x="67.90" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="245" width="0.5" height="15.0" fill="rgb(205,0,26)" rx="2" ry="2" />
<text  x="1184.66" y="255.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1349" width="6.8" height="15.0" fill="rgb(235,72,3)" rx="2" ry="2" />
<text  x="67.90" y="1359.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (2 samples, 0.01%)</title><rect x="452.9" y="1973" width="0.1" height="15.0" fill="rgb(208,152,31)" rx="2" ry="2" />
<text  x="455.87" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="405" width="6.8" height="15.0" fill="rgb(209,139,21)" rx="2" ry="2" />
<text  x="67.90" y="415.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (3 samples, 0.02%)</title><rect x="476.3" y="1877" width="0.2" height="15.0" fill="rgb(246,22,4)" rx="2" ry="2" />
<text  x="479.28" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1181.4" y="1973" width="0.8" height="15.0" fill="rgb(249,78,16)" rx="2" ry="2" />
<text  x="1184.40" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="1365" width="0.5" height="15.0" fill="rgb(209,217,20)" rx="2" ry="2" />
<text  x="1184.66" y="1375.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2 samples, 0.01%)</title><rect x="449.1" y="1941" width="0.2" height="15.0" fill="rgb(221,123,23)" rx="2" ry="2" />
<text  x="452.13" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="213" width="0.5" height="15.0" fill="rgb(220,141,10)" rx="2" ry="2" />
<text  x="1185.34" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (111 samples, 0.80%)</title><rect x="1153.9" y="2053" width="9.5" height="15.0" fill="rgb(231,57,1)" rx="2" ry="2" />
<text  x="1156.91" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="549" width="0.2" height="15.0" fill="rgb(244,118,42)" rx="2" ry="2" />
<text  x="461.49" y="559.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1461" width="6.9" height="15.0" fill="rgb(217,5,16)" rx="2" ry="2" />
<text  x="67.90" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="837" width="0.5" height="15.0" fill="rgb(248,159,22)" rx="2" ry="2" />
<text  x="1184.66" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="458.7" y="1717" width="0.6" height="15.0" fill="rgb(209,200,45)" rx="2" ry="2" />
<text  x="461.75" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.1" y="1301" width="0.2" height="15.0" fill="rgb(245,50,46)" rx="2" ry="2" />
<text  x="462.09" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="213" width="0.5" height="15.0" fill="rgb(218,62,27)" rx="2" ry="2" />
<text  x="1184.66" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1181.6" y="1813" width="0.6" height="15.0" fill="rgb(253,97,51)" rx="2" ry="2" />
<text  x="1184.57" y="1823.5" ></text>
</g>
<g >
<title>fasttext::Model::predict (5 samples, 0.04%)</title><rect x="82.2" y="2021" width="0.4" height="15.0" fill="rgb(239,107,31)" rx="2" ry="2" />
<text  x="85.18" y="2031.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (2 samples, 0.01%)</title><rect x="638.8" y="2037" width="0.1" height="15.0" fill="rgb(243,181,42)" rx="2" ry="2" />
<text  x="641.77" y="2047.5" ></text>
</g>
<g >
<title>TSlinkClustering::ClusterBatch (2,728 samples, 19.68%)</title><rect x="210.5" y="1973" width="232.2" height="15.0" fill="rgb(205,129,12)" rx="2" ry="2" />
<text  x="213.54" y="1983.5" >TSlinkClustering::ClusterBatch</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="869" width="0.5" height="15.0" fill="rgb(231,115,16)" rx="2" ry="2" />
<text  x="1184.66" y="879.5" ></text>
</g>
<g >
<title>[unknown] (119 samples, 0.86%)</title><rect x="62.3" y="1973" width="10.1" height="15.0" fill="rgb(224,106,2)" rx="2" ry="2" />
<text  x="65.26" y="1983.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::construct&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="452.9" y="1989" width="0.1" height="15.0" fill="rgb(240,167,19)" rx="2" ry="2" />
<text  x="455.87" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="613" width="0.2" height="15.0" fill="rgb(209,4,51)" rx="2" ry="2" />
<text  x="461.49" y="623.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::~Dictionary (4 samples, 0.03%)</title><rect x="189.1" y="1989" width="0.3" height="15.0" fill="rgb(238,148,14)" rx="2" ry="2" />
<text  x="192.09" y="1999.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="452.9" y="1861" width="0.1" height="15.0" fill="rgb(213,145,47)" rx="2" ry="2" />
<text  x="455.87" y="1871.5" ></text>
</g>
<g >
<title>RunFasttextClf (13 samples, 0.09%)</title><rect x="454.3" y="1941" width="1.1" height="15.0" fill="rgb(221,83,48)" rx="2" ry="2" />
<text  x="457.32" y="1951.5" ></text>
</g>
<g >
<title>torch::autograd::SavedVariable::SavedVariable (2 samples, 0.01%)</title><rect x="641.2" y="1989" width="0.2" height="15.0" fill="rgb(213,92,5)" rx="2" ry="2" />
<text  x="644.24" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (54 samples, 0.39%)</title><rect x="64.9" y="85" width="4.6" height="15.0" fill="rgb(236,85,20)" rx="2" ry="2" />
<text  x="67.90" y="95.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;TThreadPool::TThreadPool (4 samples, 0.03%)</title><rect x="51.5" y="2037" width="0.3" height="15.0" fill="rgb(228,84,24)" rx="2" ry="2" />
<text  x="54.45" y="2047.5" ></text>
</g>
<g >
<title>at::native::mm_cpu_out (2 samples, 0.01%)</title><rect x="69.1" y="69" width="0.1" height="15.0" fill="rgb(236,38,11)" rx="2" ry="2" />
<text  x="72.07" y="79.5" ></text>
</g>
<g >
<title>c10::SmallVectorImpl&lt;at::OperandInfo&gt;::emplace_back&lt;at::Tensor const&amp;&gt; (5 samples, 0.04%)</title><rect x="757.6" y="2021" width="0.4" height="15.0" fill="rgb(235,213,53)" rx="2" ry="2" />
<text  x="760.60" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1637" width="0.5" height="15.0" fill="rgb(215,73,37)" rx="2" ry="2" />
<text  x="1185.34" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1181.6" y="1701" width="0.6" height="15.0" fill="rgb(240,109,12)" rx="2" ry="2" />
<text  x="1184.57" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="1189" width="0.2" height="15.0" fill="rgb(247,127,42)" rx="2" ry="2" />
<text  x="461.49" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="459.1" y="1381" width="0.2" height="15.0" fill="rgb(225,110,23)" rx="2" ry="2" />
<text  x="462.09" y="1391.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (2 samples, 0.01%)</title><rect x="81.3" y="2021" width="0.2" height="15.0" fill="rgb(222,160,12)" rx="2" ry="2" />
<text  x="84.33" y="2031.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.04%)</title><rect x="205.6" y="1909" width="0.4" height="15.0" fill="rgb(217,113,45)" rx="2" ry="2" />
<text  x="208.60" y="1919.5" ></text>
</g>
<g >
<title>torch::autograd::VariableHooks::grad_fn (2 samples, 0.01%)</title><rect x="746.6" y="2021" width="0.2" height="15.0" fill="rgb(214,41,6)" rx="2" ry="2" />
<text  x="749.62" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="458.3" y="1397" width="0.4" height="15.0" fill="rgb(253,140,51)" rx="2" ry="2" />
<text  x="461.32" y="1407.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (8 samples, 0.06%)</title><rect x="73.3" y="1989" width="0.7" height="15.0" fill="rgb(248,24,19)" rx="2" ry="2" />
<text  x="76.33" y="1999.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (30 samples, 0.22%)</title><rect x="93.8" y="2021" width="2.5" height="15.0" fill="rgb(232,60,35)" rx="2" ry="2" />
<text  x="96.76" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="209.8" y="1749" width="0.1" height="15.0" fill="rgb(215,70,45)" rx="2" ry="2" />
<text  x="212.77" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="149" width="6.8" height="15.0" fill="rgb(214,91,39)" rx="2" ry="2" />
<text  x="67.90" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="1253" width="0.2" height="15.0" fill="rgb(250,72,29)" rx="2" ry="2" />
<text  x="461.49" y="1263.5" ></text>
</g>
<g >
<title>caffe2::TypeMeta::_typeMetaDataInstance&lt;signed char&gt; (2 samples, 0.01%)</title><rect x="476.9" y="1877" width="0.1" height="15.0" fill="rgb(224,27,12)" rx="2" ry="2" />
<text  x="479.88" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="965" width="0.5" height="15.0" fill="rgb(221,106,52)" rx="2" ry="2" />
<text  x="1184.66" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="149" width="0.5" height="15.0" fill="rgb(253,186,12)" rx="2" ry="2" />
<text  x="1185.34" y="159.5" ></text>
</g>
<g >
<title>nlohmann::detail::output_string_adapter&lt;char, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::write_characters (4 samples, 0.03%)</title><rect x="447.0" y="1909" width="0.3" height="15.0" fill="rgb(246,64,34)" rx="2" ry="2" />
<text  x="450.00" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="1125" width="0.2" height="15.0" fill="rgb(237,79,45)" rx="2" ry="2" />
<text  x="461.49" y="1135.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (8 samples, 0.06%)</title><rect x="759.8" y="2005" width="0.7" height="15.0" fill="rgb(244,45,21)" rx="2" ry="2" />
<text  x="762.81" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="757" width="0.5" height="15.0" fill="rgb(220,9,5)" rx="2" ry="2" />
<text  x="1185.34" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1077" width="0.5" height="15.0" fill="rgb(250,122,53)" rx="2" ry="2" />
<text  x="1185.34" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="709" width="0.5" height="15.0" fill="rgb(222,109,24)" rx="2" ry="2" />
<text  x="1185.34" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="209.8" y="1573" width="0.1" height="15.0" fill="rgb(213,220,35)" rx="2" ry="2" />
<text  x="212.77" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (18 samples, 0.13%)</title><rect x="457.7" y="1861" width="1.6" height="15.0" fill="rgb(235,25,11)" rx="2" ry="2" />
<text  x="460.72" y="1871.5" ></text>
</g>
<g >
<title>c10::TensorImpl::device (2 samples, 0.01%)</title><rect x="757.8" y="2005" width="0.1" height="15.0" fill="rgb(241,32,26)" rx="2" ry="2" />
<text  x="760.77" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::add (3 samples, 0.02%)</title><rect x="174.9" y="1941" width="0.2" height="15.0" fill="rgb(219,143,45)" rx="2" ry="2" />
<text  x="177.87" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan_string (144 samples, 1.04%)</title><rect x="175.9" y="1941" width="12.3" height="15.0" fill="rgb(220,187,10)" rx="2" ry="2" />
<text  x="178.90" y="1951.5" ></text>
</g>
<g >
<title>TAnnotator::AnnotateAll (179 samples, 1.29%)</title><rect x="173.7" y="2005" width="15.2" height="15.0" fill="rgb(245,171,36)" rx="2" ry="2" />
<text  x="176.68" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="885" width="0.5" height="15.0" fill="rgb(210,138,39)" rx="2" ry="2" />
<text  x="1185.34" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="209.8" y="1781" width="0.2" height="15.0" fill="rgb(236,1,36)" rx="2" ry="2" />
<text  x="212.77" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="1157" width="0.2" height="15.0" fill="rgb(216,186,30)" rx="2" ry="2" />
<text  x="461.49" y="1167.5" ></text>
</g>
<g >
<title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::emplace_back&lt;at::Tensor&gt; (2 samples, 0.01%)</title><rect x="640.9" y="1989" width="0.2" height="15.0" fill="rgb(253,57,24)" rx="2" ry="2" />
<text  x="643.90" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="629" width="0.5" height="15.0" fill="rgb(209,81,21)" rx="2" ry="2" />
<text  x="1185.34" y="639.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="565" width="6.8" height="15.0" fill="rgb(252,100,45)" rx="2" ry="2" />
<text  x="67.90" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="209.8" y="1589" width="0.1" height="15.0" fill="rgb(233,162,14)" rx="2" ry="2" />
<text  x="212.77" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="565" width="0.2" height="15.0" fill="rgb(249,74,48)" rx="2" ry="2" />
<text  x="461.49" y="575.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="981" width="6.8" height="15.0" fill="rgb(237,71,33)" rx="2" ry="2" />
<text  x="67.90" y="991.5" ></text>
</g>
<g >
<title>at::Tensor::set_ (13 samples, 0.09%)</title><rect x="475.1" y="1893" width="1.1" height="15.0" fill="rgb(214,143,15)" rx="2" ry="2" />
<text  x="478.09" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="209.8" y="1445" width="0.1" height="15.0" fill="rgb(232,111,28)" rx="2" ry="2" />
<text  x="212.77" y="1455.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.06%)</title><rect x="197.6" y="1925" width="0.8" height="15.0" fill="rgb(215,182,0)" rx="2" ry="2" />
<text  x="200.60" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1525" width="0.5" height="15.0" fill="rgb(229,86,23)" rx="2" ry="2" />
<text  x="1185.34" y="1535.5" ></text>
</g>
<g >
<title>at::native::mm_cpu (3 samples, 0.02%)</title><rect x="642.0" y="2005" width="0.3" height="15.0" fill="rgb(244,165,38)" rx="2" ry="2" />
<text  x="645.01" y="2015.5" ></text>
</g>
<g >
<title>at::TypeDefault::fill__Scalar (13 samples, 0.09%)</title><rect x="70.5" y="85" width="1.1" height="15.0" fill="rgb(226,7,18)" rx="2" ry="2" />
<text  x="73.52" y="95.5" ></text>
</g>
<g >
<title>cfree (5 samples, 0.04%)</title><rect x="634.4" y="1957" width="0.5" height="15.0" fill="rgb(226,128,36)" rx="2" ry="2" />
<text  x="637.43" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="613" width="0.5" height="15.0" fill="rgb(244,3,10)" rx="2" ry="2" />
<text  x="1184.66" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="209.8" y="1461" width="0.1" height="15.0" fill="rgb(235,205,52)" rx="2" ry="2" />
<text  x="212.77" y="1471.5" ></text>
</g>
<g >
<title>[libc10.so] (2 samples, 0.01%)</title><rect x="48.6" y="2053" width="0.1" height="15.0" fill="rgb(219,101,12)" rx="2" ry="2" />
<text  x="51.56" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="597" width="0.5" height="15.0" fill="rgb(237,148,46)" rx="2" ry="2" />
<text  x="1185.34" y="607.5" ></text>
</g>
<g >
<title>nlohmann::operator&gt;&gt; (158 samples, 1.14%)</title><rect x="174.7" y="1989" width="13.5" height="15.0" fill="rgb(217,10,35)" rx="2" ry="2" />
<text  x="177.70" y="1999.5" ></text>
</g>
<g >
<title>at::native::fill_out (6 samples, 0.04%)</title><rect x="71.1" y="69" width="0.5" height="15.0" fill="rgb(241,93,51)" rx="2" ry="2" />
<text  x="74.12" y="79.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (3 samples, 0.02%)</title><rect x="206.2" y="1909" width="0.3" height="15.0" fill="rgb(244,147,2)" rx="2" ry="2" />
<text  x="209.20" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="744.1" y="2037" width="0.2" height="15.0" fill="rgb(205,24,20)" rx="2" ry="2" />
<text  x="747.15" y="2047.5" ></text>
</g>
<g >
<title>memcpy@plt (8 samples, 0.06%)</title><rect x="1023.0" y="2053" width="0.7" height="15.0" fill="rgb(249,121,29)" rx="2" ry="2" />
<text  x="1026.00" y="2063.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::_M_realloc_insert&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (2 samples, 0.01%)</title><rect x="452.4" y="1989" width="0.1" height="15.0" fill="rgb(218,178,24)" rx="2" ry="2" />
<text  x="455.36" y="1999.5" ></text>
</g>
<g >
<title>at::TensorIterator::analyze_memory_format (2 samples, 0.01%)</title><rect x="73.1" y="2005" width="0.1" height="15.0" fill="rgb(226,163,33)" rx="2" ry="2" />
<text  x="76.07" y="2015.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxed&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (6 samples, 0.04%)</title><rect x="476.2" y="1893" width="0.5" height="15.0" fill="rgb(247,225,19)" rx="2" ry="2" />
<text  x="479.19" y="1903.5" ></text>
</g>
<g >
<title>RunFasttextClf (4 samples, 0.03%)</title><rect x="456.5" y="1941" width="0.4" height="15.0" fill="rgb(209,213,0)" rx="2" ry="2" />
<text  x="459.53" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (822 samples, 5.93%)</title><rect x="59.1" y="2037" width="70.0" height="15.0" fill="rgb(249,195,32)" rx="2" ry="2" />
<text  x="62.11" y="2047.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="933" width="6.8" height="15.0" fill="rgb(225,117,50)" rx="2" ry="2" />
<text  x="67.90" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (151 samples, 1.09%)</title><rect x="1164.5" y="2053" width="12.8" height="15.0" fill="rgb(248,216,9)" rx="2" ry="2" />
<text  x="1167.46" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1925" width="6.9" height="15.0" fill="rgb(227,139,32)" rx="2" ry="2" />
<text  x="67.90" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="261" width="0.5" height="15.0" fill="rgb(234,175,36)" rx="2" ry="2" />
<text  x="1185.34" y="271.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="1029" width="6.8" height="15.0" fill="rgb(223,215,9)" rx="2" ry="2" />
<text  x="67.90" y="1039.5" ></text>
</g>
<g >
<title>main (3,287 samples, 23.71%)</title><rect x="173.3" y="2021" width="279.7" height="15.0" fill="rgb(234,208,35)" rx="2" ry="2" />
<text  x="176.26" y="2031.5" >main</text>
</g>
<g >
<title>std::istream::sentry::sentry (8 samples, 0.06%)</title><rect x="740.9" y="2005" width="0.7" height="15.0" fill="rgb(253,82,45)" rx="2" ry="2" />
<text  x="743.91" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1269" width="0.5" height="15.0" fill="rgb(211,141,13)" rx="2" ry="2" />
<text  x="1185.34" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1181.4" y="2037" width="0.8" height="15.0" fill="rgb(205,74,44)" rx="2" ry="2" />
<text  x="1184.40" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="1205" width="0.2" height="15.0" fill="rgb(241,205,26)" rx="2" ry="2" />
<text  x="461.49" y="1215.5" ></text>
</g>
<g >
<title>Eigen::internal::gebp_kernel&lt;float, float, long, Eigen::internal::blas_data_mapper&lt;float, long, 0, 0, 1&gt;, 8, 4, false, false&gt;::operator (518 samples, 3.74%)</title><rect x="129.2" y="1973" width="44.1" height="15.0" fill="rgb(219,111,6)" rx="2" ry="2" />
<text  x="132.17" y="1983.5" >Eige..</text>
</g>
<g >
<title>fasttext::ProductQuantizer::get_centroids (20 samples, 0.14%)</title><rect x="990.7" y="2053" width="1.7" height="15.0" fill="rgb(244,102,49)" rx="2" ry="2" />
<text  x="993.74" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1182.3" y="1829" width="0.5" height="15.0" fill="rgb(234,119,7)" rx="2" ry="2" />
<text  x="1185.25" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (25 samples, 0.18%)</title><rect x="759.6" y="2037" width="2.2" height="15.0" fill="rgb(227,53,16)" rx="2" ry="2" />
<text  x="762.64" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="805" width="6.8" height="15.0" fill="rgb(208,131,21)" rx="2" ry="2" />
<text  x="67.90" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1181.1" y="2005" width="0.2" height="15.0" fill="rgb(240,41,48)" rx="2" ry="2" />
<text  x="1184.15" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (105 samples, 0.76%)</title><rect x="63.1" y="1957" width="9.0" height="15.0" fill="rgb(206,46,52)" rx="2" ry="2" />
<text  x="66.11" y="1967.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="452.9" y="1941" width="0.1" height="15.0" fill="rgb(240,196,14)" rx="2" ry="2" />
<text  x="455.87" y="1951.5" ></text>
</g>
<g >
<title>torch::jit::InterpreterStateImpl::runImpl (30 samples, 0.22%)</title><rect x="1150.8" y="1957" width="2.5" height="15.0" fill="rgb(233,15,25)" rx="2" ry="2" />
<text  x="1153.76" y="1967.5" ></text>
</g>
<g >
<title>at::native::add (4 samples, 0.03%)</title><rect x="1152.2" y="1893" width="0.3" height="15.0" fill="rgb(240,11,2)" rx="2" ry="2" />
<text  x="1155.21" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="209.8" y="1701" width="0.1" height="15.0" fill="rgb(233,6,30)" rx="2" ry="2" />
<text  x="212.77" y="1711.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (3 samples, 0.02%)</title><rect x="1181.7" y="37" width="0.3" height="15.0" fill="rgb(244,54,25)" rx="2" ry="2" />
<text  x="1184.74" y="47.5" ></text>
</g>
<g >
<title>GetHost (7 samples, 0.05%)</title><rect x="209.4" y="1957" width="0.6" height="15.0" fill="rgb(226,49,31)" rx="2" ry="2" />
<text  x="212.43" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1829" width="6.9" height="15.0" fill="rgb(209,18,35)" rx="2" ry="2" />
<text  x="67.90" y="1839.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2 samples, 0.01%)</title><rect x="452.5" y="2005" width="0.2" height="15.0" fill="rgb(248,176,30)" rx="2" ry="2" />
<text  x="455.53" y="2015.5" ></text>
</g>
<g >
<title>at::namedinference::propagate_names_if_nonempty (2 samples, 0.01%)</title><rect x="756.3" y="2053" width="0.2" height="15.0" fill="rgb(252,130,37)" rx="2" ry="2" />
<text  x="759.32" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="357" width="0.5" height="15.0" fill="rgb(218,151,38)" rx="2" ry="2" />
<text  x="1185.34" y="367.5" ></text>
</g>
<g >
<title>at::TensorIterator::compute_shape (2 samples, 0.01%)</title><rect x="73.5" y="1973" width="0.2" height="15.0" fill="rgb(216,30,37)" rx="2" ry="2" />
<text  x="76.50" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="1221" width="0.2" height="15.0" fill="rgb(205,23,9)" rx="2" ry="2" />
<text  x="461.49" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="773" width="0.5" height="15.0" fill="rgb(245,118,41)" rx="2" ry="2" />
<text  x="1184.66" y="783.5" ></text>
</g>
<g >
<title>torch::autograd::generated::MmBackward::~MmBackward (5 samples, 0.04%)</title><rect x="745.6" y="2037" width="0.4" height="15.0" fill="rgb(221,142,18)" rx="2" ry="2" />
<text  x="748.60" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="485" width="0.5" height="15.0" fill="rgb(217,189,43)" rx="2" ry="2" />
<text  x="1184.66" y="495.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (2 samples, 0.01%)</title><rect x="638.8" y="2021" width="0.1" height="15.0" fill="rgb(207,33,48)" rx="2" ry="2" />
<text  x="641.77" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="693" width="0.2" height="15.0" fill="rgb(211,215,33)" rx="2" ry="2" />
<text  x="461.49" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_insert_unique&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (3 samples, 0.02%)</title><rect x="208.2" y="1957" width="0.3" height="15.0" fill="rgb(241,222,16)" rx="2" ry="2" />
<text  x="211.24" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="85" width="0.5" height="15.0" fill="rgb(211,163,51)" rx="2" ry="2" />
<text  x="1185.34" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="677" width="0.2" height="15.0" fill="rgb(229,225,36)" rx="2" ry="2" />
<text  x="461.49" y="687.5" ></text>
</g>
<g >
<title>torch::autograd::DifferentiableViewMeta::~DifferentiableViewMeta (2 samples, 0.01%)</title><rect x="644.9" y="2005" width="0.2" height="15.0" fill="rgb(236,69,18)" rx="2" ry="2" />
<text  x="647.90" y="2015.5" ></text>
</g>
<g >
<title>torch::autograd::impl::set_gradient_edge (2 samples, 0.01%)</title><rect x="744.7" y="2005" width="0.2" height="15.0" fill="rgb(224,228,49)" rx="2" ry="2" />
<text  x="747.74" y="2015.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="480.4" y="1941" width="0.2" height="15.0" fill="rgb(244,23,19)" rx="2" ry="2" />
<text  x="483.37" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1461" width="0.5" height="15.0" fill="rgb(221,178,6)" rx="2" ry="2" />
<text  x="1185.34" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="789" width="0.5" height="15.0" fill="rgb(206,13,26)" rx="2" ry="2" />
<text  x="1184.66" y="799.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="744.7" y="2021" width="0.2" height="15.0" fill="rgb(212,34,18)" rx="2" ry="2" />
<text  x="747.74" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1397" width="0.5" height="15.0" fill="rgb(230,2,28)" rx="2" ry="2" />
<text  x="1185.34" y="1407.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1589" width="6.9" height="15.0" fill="rgb(247,218,23)" rx="2" ry="2" />
<text  x="67.90" y="1599.5" ></text>
</g>
<g >
<title>c10::FunctionSchema::checkArg (12 samples, 0.09%)</title><rect x="1148.5" y="1973" width="1.1" height="15.0" fill="rgb(214,202,35)" rx="2" ry="2" />
<text  x="1151.55" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1182.2" y="2053" width="0.6" height="15.0" fill="rgb(210,63,11)" rx="2" ry="2" />
<text  x="1185.17" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="821" width="0.5" height="15.0" fill="rgb(251,49,34)" rx="2" ry="2" />
<text  x="1185.34" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="549" width="0.5" height="15.0" fill="rgb(212,116,32)" rx="2" ry="2" />
<text  x="1184.66" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="1173" width="0.5" height="15.0" fill="rgb(247,25,15)" rx="2" ry="2" />
<text  x="1185.34" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.1" y="1173" width="0.2" height="15.0" fill="rgb(208,42,24)" rx="2" ry="2" />
<text  x="462.09" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="469" width="0.5" height="15.0" fill="rgb(230,144,53)" rx="2" ry="2" />
<text  x="1184.66" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="501" width="0.5" height="15.0" fill="rgb(237,29,53)" rx="2" ry="2" />
<text  x="1185.34" y="511.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (22 samples, 0.16%)</title><rect x="449.3" y="2005" width="1.9" height="15.0" fill="rgb(228,207,49)" rx="2" ry="2" />
<text  x="452.30" y="2015.5" ></text>
</g>
<g >
<title>TDocument::TDocument (2 samples, 0.01%)</title><rect x="173.9" y="1989" width="0.1" height="15.0" fill="rgb(207,221,16)" rx="2" ry="2" />
<text  x="176.85" y="1999.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="207.4" y="1941" width="0.2" height="15.0" fill="rgb(224,42,31)" rx="2" ry="2" />
<text  x="210.39" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="917" width="6.8" height="15.0" fill="rgb(211,25,43)" rx="2" ry="2" />
<text  x="67.90" y="927.5" ></text>
</g>
<g >
<title>__tls_get_addr (2 samples, 0.01%)</title><rect x="471.3" y="1893" width="0.1" height="15.0" fill="rgb(210,105,30)" rx="2" ry="2" />
<text  x="474.26" y="1903.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (19 samples, 0.14%)</title><rect x="75.2" y="2005" width="1.6" height="15.0" fill="rgb(234,117,18)" rx="2" ry="2" />
<text  x="78.20" y="2015.5" ></text>
</g>
<g >
<title>torch::autograd::make_variable (2 samples, 0.01%)</title><rect x="477.3" y="1909" width="0.2" height="15.0" fill="rgb(232,68,24)" rx="2" ry="2" />
<text  x="480.30" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="459.1" y="1189" width="0.2" height="15.0" fill="rgb(239,63,34)" rx="2" ry="2" />
<text  x="462.09" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1182.3" y="1989" width="0.5" height="15.0" fill="rgb(205,126,22)" rx="2" ry="2" />
<text  x="1185.25" y="1999.5" ></text>
</g>
<g >
<title>expf32x (2 samples, 0.01%)</title><rect x="772.0" y="2053" width="0.2" height="15.0" fill="rgb(222,108,15)" rx="2" ry="2" />
<text  x="774.98" y="2063.5" ></text>
</g>
<g >
<title>__kmp_hardware_timestamp (74 samples, 0.53%)</title><rect x="748.7" y="2053" width="6.3" height="15.0" fill="rgb(207,217,47)" rx="2" ry="2" />
<text  x="751.66" y="2063.5" ></text>
</g>
<g >
<title>at::Tensor::options (2 samples, 0.01%)</title><rect x="755.9" y="2053" width="0.2" height="15.0" fill="rgb(226,194,18)" rx="2" ry="2" />
<text  x="758.89" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="341" width="6.8" height="15.0" fill="rgb(218,42,36)" rx="2" ry="2" />
<text  x="67.90" y="351.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="197" width="6.8" height="15.0" fill="rgb(207,30,31)" rx="2" ry="2" />
<text  x="67.90" y="207.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="373" width="6.8" height="15.0" fill="rgb(221,76,43)" rx="2" ry="2" />
<text  x="67.90" y="383.5" ></text>
</g>
<g >
<title>torch::autograd::generated::TBackward::~TBackward (2 samples, 0.01%)</title><rect x="746.1" y="2037" width="0.2" height="15.0" fill="rgb(224,166,35)" rx="2" ry="2" />
<text  x="749.11" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="277" width="0.5" height="15.0" fill="rgb(248,169,8)" rx="2" ry="2" />
<text  x="1185.34" y="287.5" ></text>
</g>
<g >
<title>torch::autograd::AccumulateGrad::~AccumulateGrad (2 samples, 0.01%)</title><rect x="744.6" y="2037" width="0.1" height="15.0" fill="rgb(223,187,0)" rx="2" ry="2" />
<text  x="747.57" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (37 samples, 0.27%)</title><rect x="737.0" y="2037" width="3.1" height="15.0" fill="rgb(242,203,26)" rx="2" ry="2" />
<text  x="740.00" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="1182.3" y="245" width="0.5" height="15.0" fill="rgb(248,165,21)" rx="2" ry="2" />
<text  x="1185.34" y="255.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (25 samples, 0.18%)</title><rect x="650.3" y="2037" width="2.1" height="15.0" fill="rgb(222,102,9)" rx="2" ry="2" />
<text  x="653.26" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (12 samples, 0.09%)</title><rect x="479.3" y="1941" width="1.1" height="15.0" fill="rgb(215,178,45)" rx="2" ry="2" />
<text  x="482.34" y="1951.5" ></text>
</g>
<g >
<title>std::future&lt;std::optional&lt;TDbDocument&gt; &gt;::get (6 samples, 0.04%)</title><rect x="188.4" y="1989" width="0.5" height="15.0" fill="rgb(219,199,26)" rx="2" ry="2" />
<text  x="191.41" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="773" width="6.8" height="15.0" fill="rgb(219,0,48)" rx="2" ry="2" />
<text  x="67.90" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="229" width="0.5" height="15.0" fill="rgb(232,107,11)" rx="2" ry="2" />
<text  x="1185.34" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="453" width="0.5" height="15.0" fill="rgb(231,96,36)" rx="2" ry="2" />
<text  x="1184.66" y="463.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (366 samples, 2.64%)</title><rect x="795.4" y="2053" width="31.1" height="15.0" fill="rgb(247,97,21)" rx="2" ry="2" />
<text  x="798.39" y="2063.5" >fa..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="581" width="0.5" height="15.0" fill="rgb(253,194,53)" rx="2" ry="2" />
<text  x="1185.34" y="591.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::optional&lt;TDbDocument&gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::_Bind&lt;std::optional&lt;TDbDocument&gt;  (2,152 samples, 15.52%)</title><rect x="453.8" y="1989" width="183.2" height="15.0" fill="rgb(249,190,21)" rx="2" ry="2" />
<text  x="456.81" y="1999.5" >std::__future_base::_Ta..</text>
</g>
<g >
<title>[unknown] (138 samples, 1.00%)</title><rect x="61.3" y="2005" width="11.8" height="15.0" fill="rgb(222,123,27)" rx="2" ry="2" />
<text  x="64.33" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="1045" width="0.2" height="15.0" fill="rgb(241,43,2)" rx="2" ry="2" />
<text  x="461.49" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="853" width="0.5" height="15.0" fill="rgb(217,37,1)" rx="2" ry="2" />
<text  x="1184.66" y="863.5" ></text>
</g>
<g >
<title>[unknown] (33 samples, 0.24%)</title><rect x="740.2" y="2021" width="2.8" height="15.0" fill="rgb(208,187,6)" rx="2" ry="2" />
<text  x="743.23" y="2031.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.04%)</title><rect x="61.3" y="1989" width="0.5" height="15.0" fill="rgb(208,149,15)" rx="2" ry="2" />
<text  x="64.33" y="1999.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="445.7" y="1973" width="0.3" height="15.0" fill="rgb(232,155,26)" rx="2" ry="2" />
<text  x="448.72" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1181.7" y="1349" width="0.5" height="15.0" fill="rgb(241,67,40)" rx="2" ry="2" />
<text  x="1184.66" y="1359.5" ></text>
</g>
<g >
<title>at::TypeDefault::squeeze_dim (5 samples, 0.04%)</title><rect x="637.5" y="2037" width="0.4" height="15.0" fill="rgb(215,226,4)" rx="2" ry="2" />
<text  x="640.49" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.04%)</title><rect x="209.6" y="1925" width="0.4" height="15.0" fill="rgb(233,129,41)" rx="2" ry="2" />
<text  x="212.60" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="458.1" y="1525" width="0.6" height="15.0" fill="rgb(250,208,22)" rx="2" ry="2" />
<text  x="461.15" y="1535.5" ></text>
</g>
<g >
<title>cfree (2 samples, 0.01%)</title><rect x="455.5" y="1941" width="0.2" height="15.0" fill="rgb(207,152,53)" rx="2" ry="2" />
<text  x="458.51" y="1951.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (2 samples, 0.01%)</title><rect x="476.5" y="1877" width="0.2" height="15.0" fill="rgb(210,147,14)" rx="2" ry="2" />
<text  x="479.54" y="1887.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (2 samples, 0.01%)</title><rect x="452.1" y="1925" width="0.2" height="15.0" fill="rgb(228,106,39)" rx="2" ry="2" />
<text  x="455.11" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="165" width="0.5" height="15.0" fill="rgb(240,223,38)" rx="2" ry="2" />
<text  x="1185.34" y="175.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="597" width="6.8" height="15.0" fill="rgb(217,209,49)" rx="2" ry="2" />
<text  x="67.90" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="453" width="0.2" height="15.0" fill="rgb(244,133,39)" rx="2" ry="2" />
<text  x="461.49" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1181.7" y="949" width="0.5" height="15.0" fill="rgb(228,213,17)" rx="2" ry="2" />
<text  x="1184.66" y="959.5" ></text>
</g>
<g >
<title>c10::TensorImpl::~TensorImpl (71 samples, 0.51%)</title><rect x="639.0" y="2037" width="6.1" height="15.0" fill="rgb(214,120,53)" rx="2" ry="2" />
<text  x="642.03" y="2047.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (10 samples, 0.07%)</title><rect x="199.9" y="1941" width="0.9" height="15.0" fill="rgb(223,42,7)" rx="2" ry="2" />
<text  x="202.90" y="1951.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (5 samples, 0.04%)</title><rect x="74.8" y="2005" width="0.4" height="15.0" fill="rgb(232,150,2)" rx="2" ry="2" />
<text  x="77.78" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1182.3" y="1157" width="0.5" height="15.0" fill="rgb(228,18,31)" rx="2" ry="2" />
<text  x="1185.34" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="458.5" y="1013" width="0.2" height="15.0" fill="rgb(240,228,5)" rx="2" ry="2" />
<text  x="461.49" y="1023.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const*, std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;*&gt; (2 samples, 0.01%)</title><rect x="452.9" y="1893" width="0.1" height="15.0" fill="rgb(235,180,33)" rx="2" ry="2" />
<text  x="455.87" y="1903.5" ></text>
</g>
<g >
<title>onmt::is_alphabet (69 samples, 0.50%)</title><rect x="1064.3" y="2053" width="5.9" height="15.0" fill="rgb(249,138,50)" rx="2" ry="2" />
<text  x="1067.28" y="2063.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (4 samples, 0.03%)</title><rect x="50.6" y="2021" width="0.3" height="15.0" fill="rgb(206,116,6)" rx="2" ry="2" />
<text  x="53.60" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="458.7" y="1733" width="0.6" height="15.0" fill="rgb(231,147,49)" rx="2" ry="2" />
<text  x="461.75" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (24 samples, 0.17%)</title><rect x="195.6" y="1925" width="2.0" height="15.0" fill="rgb(239,185,20)" rx="2" ry="2" />
<text  x="198.56" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="581" width="6.8" height="15.0" fill="rgb(238,212,20)" rx="2" ry="2" />
<text  x="67.90" y="591.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (11 samples, 0.08%)</title><rect x="194.6" y="1925" width="1.0" height="15.0" fill="rgb(217,209,0)" rx="2" ry="2" />
<text  x="197.62" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.58%)</title><rect x="64.9" y="1701" width="6.9" height="15.0" fill="rgb(228,52,1)" rx="2" ry="2" />
<text  x="67.90" y="1711.5" ></text>
</g>
<g >
<title>torch::zeros (8 samples, 0.06%)</title><rect x="478.2" y="1909" width="0.6" height="15.0" fill="rgb(250,52,41)" rx="2" ry="2" />
<text  x="481.15" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.04%)</title><rect x="1181.7" y="85" width="0.5" height="15.0" fill="rgb(230,178,7)" rx="2" ry="2" />
<text  x="1184.74" y="95.5" ></text>
</g>
<g >
<title>fasttext::Vector::norm (118 samples, 0.85%)</title><rect x="621.6" y="1941" width="10.0" height="15.0" fill="rgb(217,25,23)" rx="2" ry="2" />
<text  x="624.58" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="458.5" y="517" width="0.2" height="15.0" fill="rgb(250,78,27)" rx="2" ry="2" />
<text  x="461.49" y="527.5" ></text>
</g>
<g >
<title>at::TypeDefault::fill__Scalar (2 samples, 0.01%)</title><rect x="69.2" y="53" width="0.2" height="15.0" fill="rgb(230,164,2)" rx="2" ry="2" />
<text  x="72.24" y="63.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (122 samples, 0.88%)</title><rect x="773.5" y="2053" width="10.4" height="15.0" fill="rgb(250,76,3)" rx="2" ry="2" />
<text  x="776.51" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.58%)</title><rect x="64.9" y="741" width="6.8" height="15.0" fill="rgb(212,76,23)" rx="2" ry="2" />
<text  x="67.90" y="751.5" ></text>
</g>
<g >
<title>c10::TensorType::operator== (2 samples, 0.01%)</title><rect x="645.2" y="1989" width="0.1" height="15.0" fill="rgb(215,11,52)" rx="2" ry="2" />
<text  x="648.16" y="1999.5" ></text>
</g>
</g>
</svg>
